/******************************************************************************/
/***         Generated by IBExpert 2020.4.21.2 05/01/2022 09:30:06          ***/
/******************************************************************************/

SET SQL DIALECT 3;

SET NAMES NONE;

SET CLIENTLIB 'C:\Program Files\Firebird\Firebird_3_0\WOW64\fbclient.dll';

CREATE DATABASE '127.0.0.1/3060:C:\projetos\bancos\FB30\SISTEMA.FDB'
USER 'SYSDBA' PASSWORD 'X5U$w7GQRku6'
PAGE_SIZE 8192
DEFAULT CHARACTER SET WIN1252 COLLATION WIN_PTBR;



/******************************************************************************/
/***                                Domains                                 ***/
/******************************************************************************/

CREATE DOMAIN DOM_MEMO AS
BLOB SUB_TYPE 1 SEGMENT SIZE 80 CHARACTER SET ISO8859_1;



/******************************************************************************/
/***                               Generators                               ***/
/******************************************************************************/

CREATE GENERATOR GEN_ATENDIMENTO_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_ATENDIMENTO_ID TO 0;

CREATE GENERATOR GEN_CAIXA START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_CAIXA TO 469;

CREATE GENERATOR GEN_CAIXA_ABERT_FECH START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_CAIXA_ABERT_FECH TO 943;

CREATE GENERATOR GEN_CAIXA_APURACAO_VALORES START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_CAIXA_APURACAO_VALORES TO 629;

CREATE GENERATOR GEN_CAIXA_ENT_SAI START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_CAIXA_ENT_SAI TO 752;

CREATE GENERATOR GEN_CEST_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_CEST_ID TO 1290;

CREATE GENERATOR GEN_CIDADES_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_CIDADES_ID TO 5570;

CREATE GENERATOR GEN_CLIENTE START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_CLIENTE TO 0;

CREATE GENERATOR GEN_CONDPAGTO START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_CONDPAGTO TO 15;

CREATE GENERATOR GEN_CONTABANCARIA START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_CONTABANCARIA TO 6;

CREATE GENERATOR GEN_HISTORICO START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_HISTORICO TO 102;

CREATE GENERATOR GEN_HISTORICO_GRUPO START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_HISTORICO_GRUPO TO 5;

CREATE GENERATOR GEN_HIS_PRECOCUSTO START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_HIS_PRECOCUSTO TO 1330;

CREATE GENERATOR GEN_LANCAMENTO START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_LANCAMENTO TO 0;

CREATE GENERATOR GEN_LOTE START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_LOTE TO 2117;

CREATE GENERATOR GEN_LOTE_ITENS START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_LOTE_ITENS TO 2251;

CREATE GENERATOR GEN_LOTE_MATPRIMA START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_LOTE_MATPRIMA TO 5750;

CREATE GENERATOR GEN_NCM_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_NCM_ID TO 11852;

CREATE GENERATOR GEN_NOTAENTRADA START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_NOTAENTRADA TO 529;

CREATE GENERATOR GEN_NOTAENTRADA_ITENS START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_NOTAENTRADA_ITENS TO 0;

CREATE GENERATOR GEN_ORCAMENTO START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_ORCAMENTO TO 976;

CREATE GENERATOR GEN_PAGTOFORMA START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_PAGTOFORMA TO 12;

CREATE GENERATOR GEN_PAGTOPARCELAMENTO START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_PAGTOPARCELAMENTO TO 37;

CREATE GENERATOR GEN_PEDIDOVENDA START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_PEDIDOVENDA TO 0;

CREATE GENERATOR GEN_PRAZO_PAGAMENTO_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_PRAZO_PAGAMENTO_ID TO 0;

CREATE GENERATOR GEN_PRAZO_PAGAMENTO_PARCELA_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_PRAZO_PAGAMENTO_PARCELA_ID TO 0;

CREATE GENERATOR GEN_PRECOHISTORICO START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_PRECOHISTORICO TO 950;

CREATE GENERATOR GEN_PRODUTO START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_PRODUTO TO 687;

CREATE GENERATOR GEN_RECEBER_PARCIAL START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_RECEBER_PARCIAL TO 140;

CREATE GENERATOR GEN_UNIDADE START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_UNIDADE TO 138;



/******************************************************************************/
/***                           Stored procedures                            ***/
/******************************************************************************/



SET TERM ^ ;

CREATE PROCEDURE PRO_ENTRADA_SAIDA (
    CODPRO INTEGER,
    QT NUMERIC(15,3),
    SINAL CHAR(1))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE PRO_GET_SCRIPT (
    VERSAO INTEGER NOT NULL)
RETURNS (
    SCRIPT_DDL BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    SCRIPT_DML BLOB SUB_TYPE 1 SEGMENT SIZE 80)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE PRO_HIST_PRECOCUSTO (
    TIPO CHAR(1),
    IDPRODUTO INTEGER,
    PRECO NUMERIC(10,2),
    USUARIO VARCHAR(100),
    IDNF INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE PRO_HIST_PRECOVENDA (
    TIPO CHAR(1),
    ID_PROD INTEGER,
    USUARIO VARCHAR(100),
    PRECO NUMERIC(10,2))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE PRO_ISCREDIARIO (
    TIPO CHAR(1) NOT NULL,
    ID INTEGER NOT NULL)
RETURNS (
    RETORNO INTEGER NOT NULL)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE PRO_MOVIMENTOPRODUTO (
    ID_PROD INTEGER)
RETURNS (
    ENTSAI CHAR(1),
    QTDE NUMERIC(15,3),
    QTDE_FECHADA NUMERIC(15,3),
    DTMOVTO DATE,
    LOTE VARCHAR(20),
    TIPO_MOVIMENTO VARCHAR(20),
    USUARIO VARCHAR(100),
    ID_PRODUTO INTEGER,
    DESCRI VARCHAR(100),
    TIPO_PRODUTO VARCHAR(20),
    CODBARRA VARCHAR(13),
    ESTOQUE_MINIMO NUMERIC(15,3),
    SIGLA_UM VARCHAR(10))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE PRO_RECEBER_VLLIQ (
    TIPO CHAR(1) NOT NULL,
    ID INTEGER NOT NULL)
RETURNS (
    VL_LIQ NUMERIC(15,2),
    FORMAS_PAGTO VARCHAR(500))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE PRO_SONUMEROS (
    TEXTO VARCHAR(100))
RETURNS (
    RETORNO VARCHAR(100))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE PRO_TOT_DUPLICATAS (
    TIPO CHAR(1),
    ID INTEGER)
RETURNS (
    VL_TOTAL NUMERIC(10,2))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE PRO_ULTIMAVENDA (
    ID_CLIENTE INTEGER NOT NULL)
RETURNS (
    DT_ULTIMACOMPRA DATE,
    VALOR NUMERIC(15,2))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE PRO_UPD_PRODUTO_CUSTO (
    IDPRODUTO INTEGER,
    PRECO NUMERIC(10,2))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE PRO_UPDATE_DEBITO_CLIENTE (
    IDCLIENTE INTEGER)
RETURNS (
    VALOR NUMERIC(10,2))
AS
BEGIN
  SUSPEND;
END^






SET TERM ; ^



/******************************************************************************/
/***                                 Tables                                 ***/
/******************************************************************************/



CREATE TABLE CAIXA (
    ID              INTEGER NOT NULL,
    ABERTO_FECHADO  CHAR(1)
);


CREATE TABLE CAIXA_ABERT_FECH (
    ID                  INTEGER NOT NULL,
    ID_CAIXA            INTEGER NOT NULL,
    DT_HORA_ABERT_FECH  TIMESTAMP,
    USUARIO_ABERT_FECH  VARCHAR(30),
    TIPO                CHAR(1) NOT NULL,
    SALDO               NUMERIC(10,2),
    OBS                 BLOB SUB_TYPE 1 SEGMENT SIZE 80
);


CREATE TABLE CAIXA_APURACAO_VALORES (
    ID                   INTEGER NOT NULL,
    ID_CAIXA             INTEGER NOT NULL,
    ID_CAIXA_ABERT_FECH  INTEGER NOT NULL,
    VL_DINHEIRO          NUMERIC(10,2),
    VL_CHEQUE            NUMERIC(10,2),
    VL_CCREDITO          NUMERIC(10,2),
    VL_CDEBITO           NUMERIC(10,2),
    VL_RETIRADO          NUMERIC(10,2),
    OBS                  VARCHAR(250),
    VL_RETIRADOCHEQUE    NUMERIC(10,2),
    VL_PIX               NUMERIC(10,2)
);


CREATE TABLE CAIXA_ENT_SAI (
    ID           INTEGER NOT NULL,
    ID_CAIXA     INTEGER NOT NULL,
    FORMA_PAGTO  VARCHAR(30),
    VALOR        NUMERIC(10,2) NOT NULL,
    DATA_HORA    TIMESTAMP,
    USUARIO      VARCHAR(30),
    TIPO         VARCHAR(20),
    OBS          BLOB SUB_TYPE 1 SEGMENT SIZE 80
);


CREATE TABLE CEST (
    ID         INTEGER NOT NULL,
    CEST       VARCHAR(10) NOT NULL,
    NCM        VARCHAR(10),
    SEGMENTO   VARCHAR(100),
    DESCRICAO  VARCHAR(500)
);


CREATE TABLE CFOP (
    CFCOD   VARCHAR(4) NOT NULL,
    CFNOME  VARCHAR(250),
    CFNOTA  DOM_MEMO
);


CREATE TABLE CHEQUE (
    ID_BANCO     CHAR(5) NOT NULL,
    NUM_CHEQUE   INTEGER NOT NULL,
    DT_EMISSAO   DATE NOT NULL,
    DT_COMPENSA  DATE NOT NULL,
    VALOR        NUMERIC(10,2),
    NOMINAL      VARCHAR(100),
    OBS          BLOB SUB_TYPE 1 SEGMENT SIZE 80
);


CREATE TABLE CIDADE (
    ID       INTEGER NOT NULL,
    ID_IBGE  VARCHAR(10),
    NOME     VARCHAR(500) NOT NULL,
    UF       CHAR(2) NOT NULL
);


CREATE TABLE CLIENTE (
    CODIGO             INTEGER NOT NULL,
    PESSOA             CHAR(1),
    CPF_CNPJ           VARCHAR(20),
    RG_INSC            VARCHAR(30),
    NOME_RAZAO         VARCHAR(100),
    FANTASIA           VARCHAR(30),
    DATA_NASC          VARCHAR(10),
    SEXO               VARCHAR(10),
    EST_CIVIL          VARCHAR(15),
    CEP                VARCHAR(10),
    ENDERECO           VARCHAR(100),
    NUMERO             VARCHAR(10),
    COMPLEMENTO        VARCHAR(100),
    BAIRRO             VARCHAR(100),
    CIDADE             VARCHAR(50),
    UF                 CHAR(2),
    INSC_MUNICIPAL     VARCHAR(20),
    DDD_FONE           VARCHAR(3),
    TELEFONE1          VARCHAR(15),
    TELEFONE2          VARCHAR(15),
    DDD_CEL            VARCHAR(3),
    CEL                VARCHAR(15),
    EMAIL              VARCHAR(70),
    SITE               VARCHAR(30),
    COD_RAMOATIVIDADE  INTEGER,
    COD_REPRESENTANTE  INTEGER,
    PROFISSAO          VARCHAR(20),
    OBS                BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    BANCO_NOME         VARCHAR(30),
    BANCO_CONTA        VARCHAR(10),
    BANCO_AGENCIA      VARCHAR(10),
    DT_CADASTRO        DATE,
    VL_CREDITO         NUMERIC(10,2),
    VL_DEBITO          NUMERIC(10,2),
    ENT_MESMO          CHAR(1),
    ENT_CEP            VARCHAR(10),
    ENT_ENDERECO       VARCHAR(100),
    ENT_BAIRRO         VARCHAR(100),
    ENT_NUMERO         VARCHAR(10),
    ENT_CIDADE         VARCHAR(50),
    ENT_UF             CHAR(2),
    COB_MESMO          CHAR(1),
    COB_CEP            VARCHAR(10),
    COB_ENDERECO       VARCHAR(100),
    COB_NUMERO         VARCHAR(10),
    COB_BAIRRO         VARCHAR(100),
    COB_CIDADE         VARCHAR(50),
    COB_UF             CHAR(2),
    CONTATO_NOME       VARCHAR(50),
    CONTATO_FONE       VARCHAR(15),
    CONTATO_EMAIL      VARCHAR(30),
    LIMITE_CREDITO     NUMERIC(10,2) DEFAULT 0,
    CLIENTE_DEFAULT    CHAR(1) DEFAULT 'N',
    DATA_ULTIMACOMPRA  DATE
);


CREATE TABLE CONDPAGTO (
    CODIGO             INTEGER NOT NULL,
    DESCRICAO          VARCHAR(100),
    COND1              SMALLINT,
    COND2              SMALLINT,
    COND3              SMALLINT,
    COND4              SMALLINT,
    COND5              SMALLINT,
    COND6              SMALLINT,
    COND7              SMALLINT,
    COND8              SMALLINT,
    COND9              SMALLINT,
    COND10             SMALLINT,
    COND11             SMALLINT,
    COND12             SMALLINT,
    COND13             SMALLINT,
    COND14             SMALLINT,
    COND15             SMALLINT,
    ATIVO              CHAR(1),
    PERCENT_ACRESCIMO  NUMERIC(8,3),
    DIAS               COMPUTED BY (
   iif(cond1 is null,'',cond1) ||
   iif(cond2 is null,'','/'||cond2) ||
   iif(cond3 is null,'','/'||cond3) ||
   iif(cond4 is null,'','/'||cond4) ||
   iif(cond5 is null,'','/'||cond5) ||
   iif(cond6 is null,'','/'||cond6) ||
   iif(cond7 is null,'','/'||cond7) ||
   iif(cond8 is null,'','/'||cond8) ||
   iif(cond9 is null,'','/'||cond9) ||
   iif(cond10 is null,'','/'||cond10) ||
   iif(cond11 is null,'','/'||cond11) ||
   iif(cond12 is null,'','/'||cond12) ||
   iif(cond13 is null,'','/'||cond13) ||
   iif(cond14 is null,'','/'||cond14) ||
   iif(cond15 is null,'','/'||cond15) )
);


CREATE TABLE CONTA_BANCARIA (
    ID           CHAR(5) NOT NULL,
    BCO_NUMERO   VARCHAR(3),
    BCO_NOME     VARCHAR(40),
    BCO_AGENCIA  VARCHAR(4),
    BCO_CONTA    VARCHAR(12),
    PIX_TIPO     VARCHAR(20),
    PIX_CHAVE    VARCHAR(50)
);


CREATE TABLE CONTAS_A_RECEBER (
    ID                INTEGER GENERATED BY DEFAULT AS IDENTITY,
    TIPO              INTEGER DEFAULT 1 NOT NULL,
    ID_TABELA_MASTER  INTEGER,
    ID_CONTA          CHAR(5),
    ID_HISTORICO      INTEGER,
    NDUP              INTEGER NOT NULL,
    VDUP              NUMERIC(15,2) NOT NULL,
    VDESC             NUMERIC(15,2),
    VJUROS            NUMERIC(15,2),
    DVENC             DATE NOT NULL
);


CREATE TABLE CONTAS_A_RECEBER_LOG (
    ID_CONTASRECEBER  INTEGER NOT NULL,
    ORDEM             INTEGER NOT NULL,
    USUARIO           VARCHAR(30) NOT NULL,
    COMANDO           VARCHAR(50) DEFAULT 'BAIXA' NOT NULL,
    DATA_HORA         TIMESTAMP DEFAULT current_timestamp NOT NULL
);


CREATE TABLE CONTROL (
    DB_VERSAO      INTEGER NOT NULL,
    EM_MANUTENCAO  INTEGER NOT NULL
);


CREATE TABLE DEL_PDV_RECEBER (
    ID                INTEGER,
    TIPO              CHAR(1),
    FORMA_PAGTO       VARCHAR(20),
    ORDEM             VARCHAR(5),
    DT_VENC           DATE,
    VALOR             NUMERIC(10,2),
    USUARIO_EMISSAO   VARCHAR(50),
    USUARIO_EXCLUSAO  VARCHAR(50)
);


CREATE TABLE EMPRESA (
    CODIGO         INTEGER NOT NULL,
    RAZAO          VARCHAR(45) NOT NULL,
    FANTASIA       VARCHAR(40),
    CNPJ           VARCHAR(18),
    INSC           VARCHAR(15),
    INSC_MUN       VARCHAR(30),
    CNAE           VARCHAR(10),
    CEP            VARCHAR(10),
    UF             CHAR(2),
    CIDADE         VARCHAR(40),
    ENDERECO       VARCHAR(40),
    COMPLEMENTO    VARCHAR(40),
    NUMERO         VARCHAR(10),
    BAIRRO         VARCHAR(30),
    FONE           VARCHAR(15),
    FONE2          VARCHAR(15),
    CEL            VARCHAR(15),
    EMAIL          VARCHAR(50),
    REGIME_TRIBUT  VARCHAR(30),
    LOGOMARCA      BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    SITUACAO       VARCHAR(15),
    CLIENTE_LDE    VARCHAR(500),
    ENT_CEP        VARCHAR(10),
    ENT_CIDADE     VARCHAR(40),
    ENT_ENDERECO   VARCHAR(50),
    ENT_NUMERO     VARCHAR(10),
    ENT_BAIRRO     VARCHAR(40),
    ENT_CPL        VARCHAR(50),
    FAT_CEP        VARCHAR(10),
    FAT_CIDADE     VARCHAR(40),
    FAT_ENDERECO   VARCHAR(50),
    FAT_NUMERO     VARCHAR(10),
    FAT_BAIRRO     VARCHAR(40),
    FAT_CPL        VARCHAR(50),
    ENT_UF         CHAR(2),
    FAT_UF         CHAR(2),
    LOGOTIPO       BLOB SUB_TYPE 0 SEGMENT SIZE 80
);


CREATE TABLE ESTADO (
    SIGLA    VARCHAR(2) NOT NULL,
    NOME     VARCHAR(30),
    ALIQ     NUMERIC(8,3),
    CODIBGE  INTEGER
);


CREATE TABLE FABRICANTE (
    CODIGO           INTEGER NOT NULL,
    TIPO_PESSOA      CHAR(1) NOT NULL,
    CPF_CNPJ         VARCHAR(20),
    RG_INSC          VARCHAR(30),
    INSC_MUNICIPAL   VARCHAR(18),
    RAZAO_NOME       VARCHAR(60) NOT NULL,
    FANTASIA         VARCHAR(45),
    DDD_FONE         VARCHAR(5),
    TELEFONE         VARCHAR(15),
    TELEFONE2        VARCHAR(15),
    DDD_CEL          VARCHAR(5),
    CELULAR          VARCHAR(15),
    EMAIL            VARCHAR(100),
    SITE             VARCHAR(45),
    END_CEP          VARCHAR(10),
    END_ENDERECO     VARCHAR(45),
    END_COMPLEMENTO  VARCHAR(30),
    END_NUMERO       VARCHAR(6),
    END_BAIRRO       VARCHAR(30),
    END_CIDADE       VARCHAR(50),
    END_UF           CHAR(2),
    CONTATO          VARCHAR(30),
    CONTATO_FONE     VARCHAR(15),
    CONTATO_EMAIL    VARCHAR(30),
    BANCO_NOME       VARCHAR(80),
    BANCO_AGENCIA    VARCHAR(6),
    BANCO_CONTA      VARCHAR(15),
    BANCO_TIPOCONTA  VARCHAR(45) DEFAULT 'Conta Corrente',
    CODGRUPO         INTEGER,
    OBS              VARCHAR(300),
    DT_CADASTRO      DATE
);


CREATE TABLE FUNCIONARIO (
    CODIGO       INTEGER NOT NULL,
    NOME         VARCHAR(40) NOT NULL,
    ATIVO        CHAR(1) NOT NULL,
    SETOR        VARCHAR(30),
    ADVERTENCIA  BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    SUSPENCAO    BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    OBS          BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    CPF          VARCHAR(18),
    RG           VARCHAR(15),
    ENDERECO     VARCHAR(45),
    BAIRRO       VARCHAR(45),
    CIDADE       VARCHAR(45),
    ESTADO       CHAR(2),
    FONE         VARCHAR(15),
    CEL          VARCHAR(15),
    MAIL         VARCHAR(30),
    ID_VENDEDOR  INTEGER
);


CREATE TABLE GRUPO_FABRICANTE (
    CODIGO  INTEGER NOT NULL,
    DESCRI  VARCHAR(50),
    OBS     BLOB SUB_TYPE 1 SEGMENT SIZE 80
);


CREATE TABLE GRUPO_PROD (
    CODIGO  INTEGER NOT NULL,
    DESCRI  VARCHAR(45),
    OBS     BLOB SUB_TYPE 1 SEGMENT SIZE 80
);


CREATE TABLE HISTORICO (
    ID              INTEGER NOT NULL,
    CHAVE           VARCHAR(6),
    DESCRICAO       VARCHAR(60),
    DEBITO_CREDITO  VARCHAR(10) NOT NULL,
    ID_GRUPO        INTEGER
);


CREATE TABLE HISTORICO_GRUPO (
    CODIGO  INTEGER NOT NULL,
    DESCRI  VARCHAR(30) NOT NULL
);


CREATE TABLE LANCAMENTO (
    ID             INTEGER NOT NULL,
    ID_CONTA       CHAR(5) NOT NULL,
    DTMOVTO        DATE NOT NULL,
    DOC            VARCHAR(10),
    VALOR          NUMERIC(10,2) NOT NULL,
    ID_HISTORICO   INTEGER,
    DC             CHAR(8) NOT NULL,
    OBS            BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    ID_FORNECEDOR  INTEGER
);


CREATE TABLE LOG_BAIXA_RESTAURA (
    ID               INTEGER GENERATED BY DEFAULT AS IDENTITY,
    TIPO             CHAR(3) NOT NULL,
    BAIXA_RESTAURA   CHAR(1) NOT NULL,
    ID_DUPLICATA     INTEGER NOT NULL,
    TIPO_DUPLICATA   CHAR(1),
    ORDEM_DUPLICATA  VARCHAR(5) NOT NULL,
    DATA_HORA        TIMESTAMP,
    USUARIO          VARCHAR(50),
    VALOR            NUMERIC(15,2)
);


CREATE TABLE LOTE (
    ID                 INTEGER NOT NULL,
    LOTE               VARCHAR(20) NOT NULL,
    EMISSAO            DATE NOT NULL,
    VALIDADE           DATE,
    ENTREGA            DATE,
    ESTIMATIVA_PRONTO  TIMESTAMP,
    OBS                VARCHAR(100),
    STATUS             VARCHAR(20),
    GERA_MATPRIMA      CHAR(1),
    USUARIO            VARCHAR(50),
    LOTE_ACERTO        CHAR(1) DEFAULT 'N',
    AUTORIZACAO        VARCHAR(50),
    ID_PEDIDO          INTEGER
);


CREATE TABLE LOTE_ITENS (
    ID            INTEGER NOT NULL,
    ID_LOTE       VARCHAR(20) NOT NULL,
    CODPRO        INTEGER NOT NULL,
    QTDE          NUMERIC(15,3) NOT NULL,
    QTDE_FECHADA  NUMERIC(15,3) NOT NULL,
    COD_UM        INTEGER,
    ENTSAI        VARCHAR(15) DEFAULT 'ENTRADA',
    DESCRI_ITEM   VARCHAR(100)
);


CREATE TABLE LOTE_MATPRIMA (
    ID            INTEGER NOT NULL,
    ID_LOTE       VARCHAR(20) NOT NULL,
    ID_MATPRIMA   INTEGER NOT NULL,
    QTDE          NUMERIC(15,3) NOT NULL,
    QTDE_FECHADA  NUMERIC(15,3) NOT NULL
);


CREATE TABLE NATOPERACAO (
    CODIGO        INTEGER NOT NULL,
    DESCRICAO     VARCHAR(60),
    DATACADASTRO  DATE
);


CREATE TABLE NCM (
    ID                INTEGER NOT NULL,
    NCM               VARCHAR(10) NOT NULL,
    DESCRICAO         VARCHAR(500) NOT NULL,
    NACIONALFEDERAL   NUMERIC(15,2) DEFAULT 0,
    IMPORTADOFEDERAL  NUMERIC(15,2) DEFAULT 0,
    ESTADUAL          NUMERIC(15,2) DEFAULT 0,
    MUNICIPAL         NUMERIC(15,2) DEFAULT 0,
    VIGENCIANICIO     DATE,
    VIGENCIAFIM       DATE
);


CREATE TABLE NOTA_ENTRADA (
    ID               INTEGER NOT NULL,
    CODFOR           INTEGER,
    ID_CONDPAGTO     INTEGER,
    ID_HISTORICO     INTEGER,
    ID_USUARIO       INTEGER,
    DESCRICAO        VARCHAR(30),
    EMISSAO          DATE NOT NULL,
    ENTRADA          DATE NOT NULL,
    BASEICMS         NUMERIC(9,2) DEFAULT 0,
    VALORICMS        NUMERIC(9,2) DEFAULT 0,
    TOTPRODUTO       NUMERIC(9,2) DEFAULT 0,
    FRETE            NUMERIC(9,2) DEFAULT 0,
    SEGURO           NUMERIC(9,2) DEFAULT 0,
    OUTRAS           NUMERIC(9,2) DEFAULT 0,
    VALORIPI         NUMERIC(9,2) DEFAULT 0,
    TOTNOTA          NUMERIC(9,2) DEFAULT 0,
    OBS              BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    DATA_HORA        TIMESTAMP,
    N_NF             INTEGER,
    CNF              INTEGER,
    INDPAG           INTEGER,
    MODELO           VARCHAR(2),
    SERIE            INTEGER,
    DSAIENT          DATE,
    HSAIENT          TIME,
    TPNF             CHAR(1),
    FINNFE           INTEGER,
    VBCST            NUMERIC(15,2) DEFAULT 0,
    VDESC            NUMERIC(15,2) DEFAULT 0,
    VII              NUMERIC(15,2) DEFAULT 0,
    VPIS             NUMERIC(15,2) DEFAULT 0,
    VCOFINS          NUMERIC(15,2) DEFAULT 0,
    MODFRETE         VARCHAR(50),
    INFCPL           VARCHAR(60),
    QVOL             INTEGER DEFAULT 0,
    ESP              VARCHAR(60),
    MARCA            VARCHAR(60),
    NVOL             VARCHAR(60),
    PESOL            NUMERIC(15,3) DEFAULT 0,
    PESOB            NUMERIC(15,3) DEFAULT 0,
    UFEMBARQ         CHAR(2),
    XLOCEMBARQ       VARCHAR(60),
    ADICINFCPL       BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    ADICINFADFISCO   BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    VST              NUMERIC(15,2) DEFAULT 0,
    COMPRA_XNCOMPRA  VARCHAR(22),
    COMPRA_XPED      VARCHAR(60),
    COMPRA_XCONT     VARCHAR(60),
    ISSQN_VSERV      NUMERIC(15,2) DEFAULT 0,
    ISSQN_VBC        NUMERIC(15,2) DEFAULT 0,
    ISSQN_VISS       NUMERIC(15,2) DEFAULT 0,
    ISSQN_VPIS       NUMERIC(15,2) DEFAULT 0,
    ISSQN_VCOFINS    NUMERIC(15,2) DEFAULT 0,
    IMPORTADA        CHAR(1),
    CHAVE            VARCHAR(100),
    TIPO_NOTA        VARCHAR(10) DEFAULT 'NF-E',
    TIPO             VARCHAR(10),
    DT_ENTREGA       DATE,
    NAT_OPERACAO     VARCHAR(50),
    TOT_IPI          NUMERIC(10,2) DEFAULT 0,
    TR_PLACA         VARCHAR(20),
    TR_PLACAUF       CHAR(2),
    TR_RAZAO         VARCHAR(100),
    TR_CPFCNPJ       VARCHAR(20),
    TR_INSC          VARCHAR(30),
    TR_CEP           VARCHAR(20),
    TR_ENDERECO      VARCHAR(100),
    "LOG"            BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    TR_ANTT          VARCHAR(30),
    FORNECEDOR       VARCHAR(60),
    HISTORICO        VARCHAR(60)
);


CREATE TABLE NOTA_ENTRADA_ANEXO (
    ID              INTEGER NOT NULL,
    ID_NOTAENTRADA  INTEGER NOT NULL,
    ANEXO           BLOB SUB_TYPE 0 SEGMENT SIZE 80
);


CREATE TABLE NOTA_ENTRADA_ITENS (
    ID_NOTAENTRADA       INTEGER NOT NULL,
    ORDEM                SMALLINT NOT NULL,
    ID_PRODUTO           INTEGER,
    NCM                  VARCHAR(8),
    ST                   VARCHAR(3),
    QTRIB                NUMERIC(11,4) DEFAULT 0,
    UNIDADE              VARCHAR(3),
    UNIDADE_TRIB         CHAR(10),
    DESCONTO             NUMERIC(9,5) DEFAULT 0,
    VALORDESCONTO        NUMERIC(10,2) DEFAULT 0,
    VALORFRETE           NUMERIC(10,2) DEFAULT 0,
    VALOROUTRAS          NUMERIC(10,2) DEFAULT 0,
    XPED                 VARCHAR(15),
    CPROD                VARCHAR(60),
    CEAN                 VARCHAR(60),
    CFOP                 VARCHAR(5),
    VALORSEGURO          NUMERIC(18,2) DEFAULT 0,
    VALORACESSORIAS      NUMERIC(18,2) DEFAULT 0,
    IPI_BC               NUMERIC(18,2) DEFAULT 0,
    IPI_VALOR            NUMERIC(18,2) DEFAULT 0,
    IPI_ST               NUMERIC(18,2) DEFAULT 0,
    IPI_STVAL            NUMERIC(18,2) DEFAULT 0,
    IPI_ALIQ             NUMERIC(7,3) DEFAULT 0,
    IPI_CST              VARCHAR(2),
    PIS_BC               NUMERIC(18,2) DEFAULT 0,
    PIS_VALOR            NUMERIC(18,2) DEFAULT 0,
    PIS_ST               NUMERIC(18,2) DEFAULT 0,
    PIS_ALIQST           NUMERIC(8,4) DEFAULT 0,
    PIS_STVAL            NUMERIC(18,2) DEFAULT 0,
    PIS_ALIQ             NUMERIC(7,3) DEFAULT 0,
    PIS_CST              VARCHAR(2),
    COFINS_BC            NUMERIC(18,2) DEFAULT 0,
    COFINS_VALOR         NUMERIC(18,2) DEFAULT 0,
    COFINS_ST            NUMERIC(18,2) DEFAULT 0,
    COFINS_ALIQST        NUMERIC(8,4) DEFAULT 0,
    COFINS_STVAL         NUMERIC(18,2) DEFAULT 0,
    COFINS_ALIQ          NUMERIC(7,3) DEFAULT 0,
    COFINS_CST           VARCHAR(2),
    II_VBC               NUMERIC(18,2) DEFAULT 0,
    II_VDESPADU          NUMERIC(18,2) DEFAULT 0,
    II_VII               NUMERIC(18,2) DEFAULT 0,
    II_VIOF              NUMERIC(18,2) DEFAULT 0,
    DI_NDI               VARCHAR(20),
    DI_DATA              DATE,
    DI_LOCDESEMBARC      VARCHAR(60),
    DI_UFDESEMBARC       VARCHAR(2),
    DI_DATADESEMBARC     DATE,
    DI_CODEXPORTADOR     INTEGER,
    VUNTRIB              NUMERIC(18,10) DEFAULT 0,
    N_DRAW               INTEGER,
    N_RE                 INTEGER,
    QEXPORT              NUMERIC(18,3),
    CHNFE                VARCHAR(50),
    ICMS_BC              NUMERIC(18,2) DEFAULT 0,
    ICMS_PREDBC          NUMERIC(7,3) DEFAULT 0,
    ICMS_ALIQ            NUMERIC(7,3) DEFAULT 0,
    ICMS_VALOR           NUMERIC(18,2) DEFAULT 0,
    ICMS_ORIGEM          VARCHAR(50),
    ICMS_CST             VARCHAR(100),
    ICMS_PREDBCST        NUMERIC(7,3) DEFAULT 0,
    ICMS_VALORBCST       NUMERIC(18,2) DEFAULT 0,
    ICMS_ALIQST          NUMERIC(7,3) DEFAULT 0,
    ICMS_VALORST         NUMERIC(18,2) DEFAULT 0,
    ICMS_CSOSN           VARCHAR(5),
    ICMS_VBCUFDEST       NUMERIC(13,2) DEFAULT 0,
    ICMS_PFCPUFDEST      NUMERIC(3,2) DEFAULT 0,
    ICMS_PICMSUFDEST     NUMERIC(3,2) DEFAULT 0,
    ICMS_PICMSINTER      NUMERIC(2,2) DEFAULT 0,
    ICMS_PICMSINTERPART  NUMERIC(3,2) DEFAULT 0,
    ICMS_VFCPUFDEST      NUMERIC(13,2) DEFAULT 0,
    ICMS_VICMSUFDEST     NUMERIC(13,2) DEFAULT 0,
    ICMS_VICMSUFREMET    NUMERIC(13,2) DEFAULT 0,
    ICMS_MODBC           CHAR(1),
    ICMS_MODBCST         CHAR(1),
    ICMS_UFST            CHAR(2),
    ICMS_PBCOP           NUMERIC(10,2) DEFAULT 0,
    ICMS_VBCSTRET        NUMERIC(13,2) DEFAULT 0,
    ICMS_VICMSSTRET      NUMERIC(13,2) DEFAULT 0,
    ICMS_MOTDESICMS      CHAR(2),
    ICMS_PCREDSN         NUMERIC(8,4) DEFAULT 0,
    ICMS_VCREDICMSSN     NUMERIC(13,2) DEFAULT 0,
    ICMS_VBCSTDEST       NUMERIC(13,2) DEFAULT 0,
    ICMS_VICMSSTDEST     NUMERIC(13,2) DEFAULT 0,
    ICMS_VICMSDESON      NUMERIC(13,2) DEFAULT 0,
    ICMS_VICMSOP         NUMERIC(13,2) DEFAULT 0,
    ICMS_PDIF            NUMERIC(8,4) DEFAULT 0,
    ICMS_VICMSDIF        NUMERIC(13,2) DEFAULT 0,
    ICMS_VBCFCP          NUMERIC(13,2) DEFAULT 0,
    ICMS_PFCP            NUMERIC(8,4) DEFAULT 0,
    ICMS_VFCP            NUMERIC(13,2) DEFAULT 0,
    ICMS_VBCFCPST        NUMERIC(13,2) DEFAULT 0,
    ICMS_PFCPST          NUMERIC(8,4) DEFAULT 0,
    ICMS_VFCPST          NUMERIC(13,2) DEFAULT 0,
    ICMS_VBCFCPSTRET     NUMERIC(13,2) DEFAULT 0,
    ICMS_PFCPSTRET       NUMERIC(8,4) DEFAULT 0,
    ICMS_VFCPSTRET       NUMERIC(13,2) DEFAULT 0,
    ICMS_PREDBCEFET      NUMERIC(8,4) DEFAULT 0,
    ICMS_VBCEFET         NUMERIC(13,2) DEFAULT 0,
    ICMS_PST             NUMERIC(8,4) DEFAULT 0,
    ICMS_PICMSEFET       NUMERIC(8,4) DEFAULT 0,
    ICMS_VICMSEFET       NUMERIC(13,2) DEFAULT 0,
    DESCPROMOCIONAL      NUMERIC(8,3) DEFAULT 0,
    DESCNORMAL           NUMERIC(8,3) DEFAULT 0,
    PROD_ESPECIF         VARCHAR(20),
    COMB_PRODANP         VARCHAR(9),
    COMB_CODIF           VARCHAR(21),
    COMB_QTEMP           NUMERIC(12,4) DEFAULT 0,
    COMB_UFCONS          CHAR(2),
    COMB_CIDE_QBCPROD    NUMERIC(12,4) DEFAULT 0,
    COMB_CIDE_ALIQPROD   NUMERIC(11,4) DEFAULT 0,
    COMB_CIDE_VCIDE      NUMERIC(13,2) DEFAULT 0,
    ID_HISTORICO         INTEGER,
    PRODUTO_SERVICO      VARCHAR(50),
    QUANTIDADE           VARCHAR(20),
    SUBTOTAL             NUMERIC(10,2),
    TOTAL                NUMERIC(10,2),
    QTDE_INFORMADA       NUMERIC(18,3),
    UNITARIO             NUMERIC(11,10),
    PRECO_CUSTO          NUMERIC(11,10),
    QTDE                 NUMERIC(15,4)
);


CREATE TABLE NOTA_ENTRADA_PAGAR (
    ID_NOTAENTRADA  INTEGER NOT NULL,
    ID_HISTORICO    INTEGER,
    ID_CONTA        CHAR(5),
    ID_CAIXA        INTEGER,
    NFAT            INTEGER,
    VDUP            NUMERIC(15,2) DEFAULT 0,
    VDESC           NUMERIC(15,2) DEFAULT 0,
    VJUROS          NUMERIC(15,2) DEFAULT 0,
    NDUP            INTEGER NOT NULL,
    DVENC           DATE NOT NULL,
    INDPAG          VARCHAR(10),
    TPAG            VARCHAR(10),
    BAIXA_DATA      DATE,
    BAIXA_VALOR     NUMERIC(15,2) DEFAULT 0,
    BAIXA_USUARIO   VARCHAR(50),
    CHEQUE_NUMERO   INTEGER,
    ID_PAGTO        INTEGER,
    FORMA           VARCHAR(50)
);


CREATE TABLE NOTA_ENTRADA_PARCIAL (
    ID              INTEGER GENERATED BY DEFAULT AS IDENTITY,
    ID_NOTAENTRADA  INTEGER NOT NULL,
    NDUP            INTEGER NOT NULL,
    VALOR           NUMERIC(15,2),
    USUARIO         VARCHAR(50),
    DATA_HORA       TIMESTAMP,
    JUROS           NUMERIC(15,2),
    DESCONTO        NUMERIC(15,2),
    HISTORICO       INTEGER,
    CONTA           CHAR(5),
    ID_CAIXA        INTEGER,
    NUM_CHEQUE      INTEGER
);


CREATE TABLE ORCAMENTO (
    ID              INTEGER NOT NULL,
    EMISSAO         DATE NOT NULL,
    ID_CLIENTE      INTEGER NOT NULL,
    ID_FORMAPAGTO   INTEGER,
    USUARIO         VARCHAR(50),
    STATUS          VARCHAR(20),
    DT_VALIDADE     DATE,
    SOLICITACAO     BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    LIBERADO        CHAR(3),
    TIPO_LIBERACAO  VARCHAR(50),
    USU_LIBEROU     VARCHAR(100)
);


CREATE TABLE ORCAMENTO_ITEM (
    ID_ORCAMENTO  INTEGER NOT NULL,
    ORDEM         INTEGER NOT NULL,
    ID_PROD       INTEGER NOT NULL,
    QTDE          NUMERIC(18,3),
    VUNIT         NUMERIC(10,2),
    VDESC         NUMERIC(10,2),
    VTOTAL        COMPUTED BY ( ( QTDE * VUNIT ) - VDESC ),
    UNID          VARCHAR(10),
    QTDE_BAIXA    NUMERIC(18,3)
);


CREATE TABLE ORCAMENTO_PAGTO (
    ID_ORCAMENTO  INTEGER NOT NULL,
    PARCELA       VARCHAR(5) NOT NULL,
    VALOR         NUMERIC(10,2),
    VENCTO        DATE
);


CREATE TABLE PAGTO_FORMA (
    ID_PAGTOFORMA  INTEGER NOT NULL,
    DESCRI         VARCHAR(50),
    ATIVO          CHAR(1),
    USO_PDV        CHAR(1)
);


CREATE TABLE PAGTO_PARCELAMENTO (
    ID_PAGTOFORMA  INTEGER NOT NULL,
    ID             INTEGER NOT NULL,
    DESCRI         VARCHAR(50),
    NUM_PARCELAS   INTEGER,
    INTV_PARCELAS  INTEGER,
    PRIMEIRA_PARC  INTEGER,
    ACRESCIMO      NUMERIC(18,3),
    USO_COMPRAS    CHAR(1),
    USO_VENDAS     CHAR(1)
);


CREATE TABLE PAIS (
    CODIGO   INTEGER NOT NULL,
    CODPAIS  INTEGER,
    NOME     VARCHAR(40)
);


CREATE TABLE PDV_CANCELAMENTO (
    ID          INTEGER GENERATED BY DEFAULT AS IDENTITY,
    TIPO        CHAR(1) NOT NULL,
    ID_VENDA    INTEGER NOT NULL,
    ORDEM       INTEGER NOT NULL,
    ID_PRODUTO  INTEGER NOT NULL,
    QTDE        NUMERIC(8,3) NOT NULL,
    QTDE_BAIXA  NUMERIC(8,3),
    DATA        DATE,
    USUARIO     VARCHAR(100)
);


CREATE TABLE PDV_DEVOLUCAO (
    ID          INTEGER GENERATED BY DEFAULT AS IDENTITY,
    TIPO        CHAR(1) NOT NULL,
    ID_VENDA    INTEGER NOT NULL,
    ORDEM       INTEGER NOT NULL,
    ID_PRODUTO  INTEGER NOT NULL,
    QTDE        NUMERIC(8,3) NOT NULL,
    QTDE_BAIXA  NUMERIC(8,3),
    DATA        DATE,
    USUARIO     VARCHAR(100)
);


CREATE TABLE PDV_ITENS (
    ID               INTEGER NOT NULL,
    TIPO             CHAR(1) NOT NULL,
    ORDEM            INTEGER NOT NULL,
    ID_PRODUTO       INTEGER NOT NULL,
    VL_UNITARIO      NUMERIC(10,2),
    UM               VARCHAR(10),
    QTDE             NUMERIC(8,3),
    QTDE_BAIXA       NUMERIC(8,3),
    QTDE_DISPONIVEL  NUMERIC(8,3),
    VL_DESCONTO      NUMERIC(10,2),
    VL_TOTAL         NUMERIC(10,2),
    CFOP             VARCHAR(5),
    NCM              VARCHAR(8),
    VL_ICMS          NUMERIC(10,2),
    VL_PIS           NUMERIC(10,2),
    VL_COFINS        NUMERIC(10,2),
    VL_IPI           NUMERIC(10,2),
    VL_IMPOSTO       NUMERIC(10,2)
);


CREATE TABLE PDV_MASTER (
    ID                    INTEGER NOT NULL,
    TIPO                  CHAR(1) NOT NULL,
    EMISSAO               DATE NOT NULL,
    ID_CLIENTE            INTEGER,
    VL_PRODUTO            NUMERIC(10,2),
    VL_TOTAL              NUMERIC(10,2),
    VL_DESCONTO           NUMERIC(10,2),
    VL_ICMS               NUMERIC(10,2),
    VL_PIS                NUMERIC(10,2),
    VL_COFINS             NUMERIC(10,2),
    VL_IPI                NUMERIC(10,2),
    VL_IMPOSTO            NUMERIC(10,2),
    C_NF                  INTEGER,
    ID_VENDEDOR           INTEGER,
    ID_CREDIARIO          INTEGER,
    STATUS                VARCHAR(20) DEFAULT 'EFETUADA',
    MOTIVO_CANCELAMENTO   VARCHAR(2000),
    USUARIO_CANCELAMENTO  VARCHAR(50),
    ID_CAIXA              INTEGER,
    USER_AUTORIZACAO      VARCHAR(30),
    ID_HISTORICO          INTEGER NOT NULL
);


CREATE TABLE PDV_RECEBER (
    ID               INTEGER NOT NULL,
    TIPO             CHAR(1) NOT NULL,
    FORMA_PAGTO      VARCHAR(20),
    ORDEM            VARCHAR(5) NOT NULL,
    DT_VENC          DATE,
    VALOR            NUMERIC(10,2) NOT NULL,
    USUARIO_EMISSAO  VARCHAR(50),
    DT_BAIXA         DATE,
    VL_PAGO          NUMERIC(10,2),
    USUARIO_BAIXA    VARCHAR(50),
    BAIXA_ID_CAIXA   INTEGER,
    ID_CONTA         CHAR(5),
    ID_HISTORICO     INTEGER,
    JUROS            NUMERIC(10,2) DEFAULT 0,
    DESCONTO         NUMERIC(10,2) DEFAULT 0
);


CREATE TABLE PDV_RECEBER_PARCIAL (
    CODIGO           INTEGER NOT NULL,
    ID               INTEGER NOT NULL,
    TIPO             CHAR(1) NOT NULL,
    FORMA_PAGTO      VARCHAR(20),
    ORDEM            VARCHAR(5) NOT NULL,
    DT_VENC          DATE,
    VALOR            NUMERIC(10,2) NOT NULL,
    USUARIO_EMISSAO  VARCHAR(50),
    DT_BAIXA         DATE,
    VL_PAGO          NUMERIC(10,2),
    USUARIO_BAIXA    VARCHAR(50),
    ID_CAIXA         INTEGER,
    ID_HISTORICO     INTEGER,
    ID_CONTA         CHAR(5),
    JUROS            NUMERIC(10,2) DEFAULT 0,
    DESCONTO         NUMERIC(10,2) DEFAULT 0
);


CREATE TABLE PEDIDO_VENDA (
    ID                    INTEGER GENERATED BY DEFAULT AS IDENTITY,
    EMISSAO               DATE DEFAULT CURRENT_DATE NOT NULL,
    ENTRADA               TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    ENTREGA               DATE,
    ID_CLIENTE            INTEGER NOT NULL,
    ID_VENDEDOR           INTEGER,
    OBSERVACAO            VARCHAR(500),
    USUARIO               VARCHAR(40),
    STATUS                VARCHAR(50),
    GERAR_ORDEM_PRODUCAO  INTEGER DEFAULT 0
);


CREATE TABLE PEDIDO_VENDA_IMG (
    ID         INTEGER GENERATED BY DEFAULT AS IDENTITY,
    ID_PEDIDO  INTEGER NOT NULL,
    SEQUENCIA  INTEGER DEFAULT 1 NOT NULL,
    IMAGEM     BLOB SUB_TYPE 0 SEGMENT SIZE 80
);


CREATE TABLE PEDIDO_VENDA_ITEM (
    ID_PEDIDO      INTEGER NOT NULL,
    ORDEM          INTEGER NOT NULL,
    ID_PRODUTO     INTEGER NOT NULL,
    VUNIT          NUMERIC(15,2) NOT NULL,
    QTDE           NUMERIC(15,4) NOT NULL,
    QTDE_A_BAIXAR  NUMERIC(15,4) NOT NULL,
    QTDE_BAIXADA   NUMERIC(15,4) DEFAULT 0 NOT NULL,
    UNIDADE        VARCHAR(10) NOT NULL,
    VDESC          NUMERIC(15,2),
    SUBTOTAL       NUMERIC(15,2),
    TOTAL          NUMERIC(15,2)
);


CREATE TABLE PEDIDO_VENDA_STATUS (
    ID         INTEGER GENERATED BY DEFAULT AS IDENTITY,
    ID_PEDIDO  INTEGER NOT NULL,
    STATUS     VARCHAR(50) DEFAULT 'DIGITADO' NOT NULL,
    USUARIO    VARCHAR(30) NOT NULL,
    DATA_HORA  TIMESTAMP DEFAULT LOCALTIMESTAMP NOT NULL
);


CREATE TABLE PRECOCUSTO_HISTORICO (
    ID            INTEGER NOT NULL,
    ID_PROD       INTEGER NOT NULL,
    PRECO_NOVO    NUMERIC(10,2) NOT NULL,
    DATA          DATE NOT NULL,
    DATA_FIM      DATE,
    USUARIO       VARCHAR(100),
    ID_NFENTRADA  INTEGER
);


CREATE TABLE PRECOVENDA_HISTORICO (
    ID          INTEGER NOT NULL,
    ID_PROD     INTEGER NOT NULL,
    USUARIO     VARCHAR(100) NOT NULL,
    PRECO_NOVO  NUMERIC(10,2) NOT NULL,
    DATA        DATE NOT NULL,
    DT_FIM      DATE
);


CREATE TABLE PRODUTO (
    CODIGO                 INTEGER NOT NULL,
    NOME                   VARCHAR(100) NOT NULL,
    PRECO_VENDA            NUMERIC(9,2) NOT NULL,
    COD_UNIDADE            INTEGER,
    QTDE_ESTOQUE           NUMERIC(15,3) DEFAULT 0,
    PRECO_CUSTO            NUMERIC(9,2),
    ESTIMA_PRODUCAO        NUMERIC(15,3),
    PESO_BRUTO             NUMERIC(15,3),
    PESO_LIQUIDO           NUMERIC(15,3),
    EAN_CODBARRA           VARCHAR(13),
    COD_GRUPO              INTEGER,
    COD_SUBGRUPO           INTEGER,
    DESCRICAO              VARCHAR(200),
    TIPO_PRODUTO           CHAR(3) NOT NULL,
    QTDE_MINIMA            NUMERIC(15,3),
    CONV_UNIDADE           INTEGER,
    CONV_QTDE              NUMERIC(15,3),
    CONV_PRECO             NUMERIC(9,2),
    DT_CADASTRO            DATE,
    DESC_MAXIMO            NUMERIC(18,3),
    PRECO_ATACADO          NUMERIC(10,2),
    QTDE_MIN_ATACADO       NUMERIC(15,3),
    SITUACAO               VARCHAR(10) DEFAULT 'ATIVO' NOT NULL,
    FISCAL_TIPO            VARCHAR(30),
    FISCAL_ORIGEM          VARCHAR(200),
    FISCAL_NCM             INTEGER,
    FISCAL_CEST            INTEGER,
    ULTIMA_ALTERACAO       VARCHAR(200),
    CALC_CUSTO_COMPOSICAO  CHAR(1)
);


CREATE TABLE PRODUTO_COMPOSICAO (
    ID_PRODUTO   INTEGER NOT NULL,
    ID_MATPRIMA  INTEGER NOT NULL,
    QTDE         NUMERIC(15,5),
    CUSTO_UNIT   NUMERIC(15,2),
    CUSTO_TOTAL  NUMERIC(15,2)
);


CREATE TABLE PRODUTO_FORNECEDOR (
    ID_FORNECEDOR      INTEGER NOT NULL,
    ID_PRODUTO         INTEGER NOT NULL,
    PRECO              NUMERIC(10,2),
    REFERENCIA_FORNEC  VARCHAR(50),
    FORNECEDOR         VARCHAR(60)
);


CREATE TABLE RAMO_ATIVIDADE (
    CODIGO  INTEGER NOT NULL,
    DESCRI  VARCHAR(50)
);


CREATE TABLE REPRESENTANTE (
    CODIGO              INTEGER NOT NULL,
    CPF                 VARCHAR(18),
    RG                  VARCHAR(18),
    NOME                VARCHAR(45) NOT NULL,
    EMAIL               VARCHAR(70),
    SITE                VARCHAR(30),
    DDD_FONE            VARCHAR(3),
    TELEFONE1           VARCHAR(15),
    TELEFONE2           VARCHAR(15),
    DDD_CEL_PARTICULAR  CHAR(3),
    CEL_PARTICULAR      VARCHAR(15),
    DDD_CEL_EMPRESA     CHAR(3),
    CEL_EMPRESA         VARCHAR(15),
    SEXO                VARCHAR(10),
    DTNASC              DATE,
    ESTADO_CIVIL        CHAR(15),
    PROFISSAO           VARCHAR(20),
    OBS                 VARCHAR(500),
    CEP                 VARCHAR(10),
    UF                  VARCHAR(2),
    CIDADE              VARCHAR(50),
    ENDERECO            VARCHAR(45),
    COMPLEMENTO         VARCHAR(30),
    NUMERO              VARCHAR(10),
    BAIRRO              VARCHAR(30),
    SITUACAO            VARCHAR(30),
    PERCENT_COMISSAO    NUMERIC(8,3),
    META                NUMERIC(18,2),
    DT_ADMISSAO         DATE,
    BANCO_NOME          VARCHAR(30),
    BANCO_AGENCIA       VARCHAR(10),
    BANCO_CONTA         VARCHAR(10)
);


CREATE TABLE SUBGRUPO_PROD (
    CODIGO  INTEGER NOT NULL,
    DESCRI  VARCHAR(45),
    OBS     BLOB SUB_TYPE 1 SEGMENT SIZE 80
);


CREATE TABLE TRANSPORTADORA (
    CODIGO          INTEGER NOT NULL,
    TIPO_PESSOA     CHAR(1) NOT NULL,
    RAZAO           VARCHAR(60),
    FANTASIA        VARCHAR(30),
    CNPJ            VARCHAR(18),
    CPF             VARCHAR(15),
    CODFORNECEDOR   INTEGER,
    ISENTO_ICMS     CHAR(1),
    INSC_ESTADUAL   VARCHAR(15),
    INSC_MUNICIPAL  VARCHAR(20),
    MODAL           VARCHAR(20),
    CONTATO_FONE    VARCHAR(15),
    CONTATO_CEL     VARCHAR(15),
    CONTATO_EMAIL   VARCHAR(40),
    CONTATO_NOME    VARCHAR(20),
    CONTATO_SITE    VARCHAR(50),
    CEP             VARCHAR(10),
    ENDERECO        VARCHAR(45),
    NUMERO          VARCHAR(10),
    COMPLEMENTO     VARCHAR(45),
    BAIRRO          VARCHAR(30),
    CIDADE          VARCHAR(40),
    COD_PAIS        INTEGER,
    COD_EST         CHAR(2)
);


CREATE TABLE UNIDADE (
    CODIGO  INTEGER NOT NULL,
    NOME    VARCHAR(30),
    SIGLA   VARCHAR(10),
    PADRAO  CHAR(1) DEFAULT 'N'
);


CREATE TABLE USUARIO (
    USU_ID       INTEGER NOT NULL,
    USU_NOME     VARCHAR(40) NOT NULL,
    USU_SENHA    VARCHAR(40) NOT NULL,
    EMAIL        VARCHAR(100),
    FONE         VARCHAR(15),
    PERFIL       VARCHAR(50),
    ADMIN_PDV    CHAR(3),
    VENDEDOR     CHAR(3),
    NOME         VARCHAR(100),
    COMISSAO     NUMERIC(10,2),
    ID_VENDEDOR  INTEGER,
    ATIVO        CHAR(3),
    ID_GRUPO     INTEGER
);


CREATE TABLE USUARIO_GRUPO (
    ID                 INTEGER GENERATED BY DEFAULT AS IDENTITY,
    DESCRICAO          VARCHAR(100) NOT NULL,
    ATIVO              INTEGER NOT NULL,
    ACESSO_PDV         INTEGER,
    ACESSO_OP          INTEGER,
    ACESSO_FINANCEIRO  INTEGER
);




/******************************************************************************/
/***                                 Views                                  ***/
/******************************************************************************/


/* View: VW_FORMAPAGTO */
CREATE VIEW VW_FORMAPAGTO(
    ID,
    FORMA,
    NUM_PARCELA,
    INTV_PARCELA,
    PRIM_PARCELA,
    ACRESCIMO,
    COMPRA,
    VENDA)
AS
SELECT r.ID, cast(b.DESCRI||'('||r.descri||')' as varchar(100))pagto, 
    r.NUM_PARCELAS, r.INTV_PARCELAS,
        r.PRIMEIRA_PARC, r.ACRESCIMO, r.USO_COMPRAS, r.USO_VENDAS
    FROM PAGTO_PARCELAMENTO r
    left outer join PAGTO_FORMA b on (b.ID_PAGTOFORMA = r.ID_PAGTOFORMA)
;




/******************************************************************************/
/***                        Autoincrement generators                        ***/
/******************************************************************************/


ALTER TABLE CONTAS_A_RECEBER ALTER ID RESTART WITH 44;
ALTER TABLE LOG_BAIXA_RESTAURA ALTER ID RESTART WITH 1421;
ALTER TABLE NOTA_ENTRADA_PARCIAL ALTER ID RESTART WITH 6;
ALTER TABLE PDV_CANCELAMENTO ALTER ID RESTART WITH 177;
ALTER TABLE PDV_DEVOLUCAO ALTER ID RESTART WITH 36;
ALTER TABLE PEDIDO_VENDA ALTER ID RESTART WITH 15;
ALTER TABLE PEDIDO_VENDA_IMG ALTER ID RESTART WITH 9;
ALTER TABLE PEDIDO_VENDA_STATUS ALTER ID RESTART WITH 36;
ALTER TABLE USUARIO_GRUPO ALTER ID RESTART WITH 1;




/******************************************************************************/
/***                           Unique constraints                           ***/
/******************************************************************************/

ALTER TABLE LOTE ADD CONSTRAINT UNQ_LOTE_IDLOTE UNIQUE (LOTE);
ALTER TABLE PAGTO_PARCELAMENTO ADD CONSTRAINT UNQ_PAGTO_PARCELAMENTO_0 UNIQUE (ID);


/******************************************************************************/
/***                              Primary keys                              ***/
/******************************************************************************/

ALTER TABLE CAIXA ADD CONSTRAINT PK_CAIXA PRIMARY KEY (ID);
ALTER TABLE CAIXA_ABERT_FECH ADD CONSTRAINT PK_CAIXA_ABERT_FECH PRIMARY KEY (ID);
ALTER TABLE CAIXA_APURACAO_VALORES ADD CONSTRAINT PK_CAIXA_APURACAO_VALORES PRIMARY KEY (ID);
ALTER TABLE CAIXA_ENT_SAI ADD CONSTRAINT PK_CAIXA_ENT_SAI PRIMARY KEY (ID);
ALTER TABLE CEST ADD CONSTRAINT PK_CEST PRIMARY KEY (ID);
ALTER TABLE CFOP ADD PRIMARY KEY (CFCOD);
ALTER TABLE CHEQUE ADD CONSTRAINT PK_CHEQUE PRIMARY KEY (ID_BANCO, NUM_CHEQUE);
ALTER TABLE CIDADE ADD CONSTRAINT PK_CIDADE PRIMARY KEY (ID);
ALTER TABLE CLIENTE ADD PRIMARY KEY (CODIGO);
ALTER TABLE CONDPAGTO ADD PRIMARY KEY (CODIGO);
ALTER TABLE CONTAS_A_RECEBER ADD CONSTRAINT PK_CONTAS_A_RECEBER PRIMARY KEY (ID);
ALTER TABLE CONTAS_A_RECEBER_LOG ADD CONSTRAINT PK_CONTAS_A_RECEBER_LOG PRIMARY KEY (ID_CONTASRECEBER, ORDEM);
ALTER TABLE CONTA_BANCARIA ADD CONSTRAINT PK_CONTA_BANCARIA_0 PRIMARY KEY (ID);
ALTER TABLE EMPRESA ADD PRIMARY KEY (CODIGO);
ALTER TABLE ESTADO ADD PRIMARY KEY (SIGLA);
ALTER TABLE FABRICANTE ADD CONSTRAINT PK_FABRICANTE PRIMARY KEY (CODIGO);
ALTER TABLE FUNCIONARIO ADD CONSTRAINT PK_FUNCIONARIO PRIMARY KEY (CODIGO);
ALTER TABLE GRUPO_FABRICANTE ADD PRIMARY KEY (CODIGO);
ALTER TABLE GRUPO_PROD ADD PRIMARY KEY (CODIGO);
ALTER TABLE HISTORICO ADD CONSTRAINT PK_HISTORICO_0 PRIMARY KEY (ID);
ALTER TABLE HISTORICO_GRUPO ADD PRIMARY KEY (CODIGO);
ALTER TABLE LANCAMENTO ADD CONSTRAINT PK_LANCAMENTO PRIMARY KEY (ID);
ALTER TABLE LOG_BAIXA_RESTAURA ADD CONSTRAINT PK_LOG_BAIXA_RESTAURA PRIMARY KEY (ID);
ALTER TABLE LOTE ADD PRIMARY KEY (ID);
ALTER TABLE LOTE_ITENS ADD PRIMARY KEY (ID);
ALTER TABLE LOTE_MATPRIMA ADD PRIMARY KEY (ID);
ALTER TABLE NATOPERACAO ADD CONSTRAINT PK_NATOPERACAO PRIMARY KEY (CODIGO);
ALTER TABLE NCM ADD CONSTRAINT PK_NCM PRIMARY KEY (ID);
ALTER TABLE NOTA_ENTRADA ADD PRIMARY KEY (ID);
ALTER TABLE NOTA_ENTRADA_ANEXO ADD CONSTRAINT PK_NOTA_ENTRADA_ANEXO_0 PRIMARY KEY (ID);
ALTER TABLE NOTA_ENTRADA_ITENS ADD CONSTRAINT PK_NOTA_ENTRADA_ITENS_0 PRIMARY KEY (ID_NOTAENTRADA, ORDEM);
ALTER TABLE NOTA_ENTRADA_PAGAR ADD CONSTRAINT PK_NOTA_ENTRADA_PAGAR_0 PRIMARY KEY (ID_NOTAENTRADA, NDUP);
ALTER TABLE NOTA_ENTRADA_PARCIAL ADD CONSTRAINT PK_NOTA_ENTRADA_PARCIAL PRIMARY KEY (ID);
ALTER TABLE ORCAMENTO ADD CONSTRAINT PK_ORCAMENTO PRIMARY KEY (ID);
ALTER TABLE ORCAMENTO_ITEM ADD CONSTRAINT PK_ORCAMENTO_ITENS PRIMARY KEY (ID_ORCAMENTO, ORDEM);
ALTER TABLE ORCAMENTO_PAGTO ADD CONSTRAINT PK_ORCAMENTOPAGTO PRIMARY KEY (ID_ORCAMENTO, PARCELA);
ALTER TABLE PAGTO_FORMA ADD CONSTRAINT PK_PAGTO_FORMA_ID PRIMARY KEY (ID_PAGTOFORMA);
ALTER TABLE PAGTO_PARCELAMENTO ADD CONSTRAINT PK_PAGTO_PARCELAMENTO_ID PRIMARY KEY (ID_PAGTOFORMA, ID);
ALTER TABLE PAIS ADD PRIMARY KEY (CODIGO);
ALTER TABLE PDV_CANCELAMENTO ADD CONSTRAINT PK_PDV_CANCELAMENTO PRIMARY KEY (ID);
ALTER TABLE PDV_DEVOLUCAO ADD CONSTRAINT PK_PDV_DEVOLUCAO PRIMARY KEY (ID);
ALTER TABLE PDV_ITENS ADD PRIMARY KEY (ID, TIPO, ORDEM);
ALTER TABLE PDV_MASTER ADD CONSTRAINT PK_PDV_MASTER PRIMARY KEY (ID, TIPO);
ALTER TABLE PDV_RECEBER ADD PRIMARY KEY (ID, TIPO, ORDEM);
ALTER TABLE PDV_RECEBER_PARCIAL ADD CONSTRAINT PK_PDV_RECEBER_PARCIAL_0 PRIMARY KEY (CODIGO);
ALTER TABLE PEDIDO_VENDA ADD CONSTRAINT PK_PEDIDO_VENDA PRIMARY KEY (ID);
ALTER TABLE PEDIDO_VENDA_IMG ADD CONSTRAINT PK_PEDIDO_VENDA_IMG PRIMARY KEY (ID);
ALTER TABLE PEDIDO_VENDA_ITEM ADD CONSTRAINT PK_PEDIDO_VENDA_ITEM PRIMARY KEY (ID_PEDIDO, ORDEM);
ALTER TABLE PEDIDO_VENDA_STATUS ADD CONSTRAINT PK_PEDIDO_VENDA_STATUS PRIMARY KEY (ID);
ALTER TABLE PRECOCUSTO_HISTORICO ADD CONSTRAINT PK_PRECOCUSTOHISTORICO PRIMARY KEY (ID);
ALTER TABLE PRECOVENDA_HISTORICO ADD CONSTRAINT PK_PRECOVENDAHISTORICO PRIMARY KEY (ID);
ALTER TABLE PRODUTO ADD PRIMARY KEY (CODIGO);
ALTER TABLE PRODUTO_COMPOSICAO ADD CONSTRAINT PK_PRODUTO_COMPOSICAO PRIMARY KEY (ID_PRODUTO, ID_MATPRIMA);
ALTER TABLE PRODUTO_FORNECEDOR ADD CONSTRAINT PK_PRODUTO_FORNECEDOR PRIMARY KEY (ID_FORNECEDOR, ID_PRODUTO);
ALTER TABLE RAMO_ATIVIDADE ADD PRIMARY KEY (CODIGO);
ALTER TABLE REPRESENTANTE ADD PRIMARY KEY (CODIGO);
ALTER TABLE SUBGRUPO_PROD ADD PRIMARY KEY (CODIGO);
ALTER TABLE TRANSPORTADORA ADD PRIMARY KEY (CODIGO);
ALTER TABLE UNIDADE ADD PRIMARY KEY (CODIGO);
ALTER TABLE USUARIO ADD CONSTRAINT PK_USUARIO PRIMARY KEY (USU_ID);
ALTER TABLE USUARIO_GRUPO ADD CONSTRAINT PK_USUARIO_GRUPO PRIMARY KEY (ID);


/******************************************************************************/
/***                              Foreign keys                              ***/
/******************************************************************************/

ALTER TABLE CAIXA_ABERT_FECH ADD CONSTRAINT FK_CAIXA_ABERT_FECH_CAIXA FOREIGN KEY (ID_CAIXA) REFERENCES CAIXA (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE CAIXA_APURACAO_VALORES ADD CONSTRAINT FK_CAIXA_ABERT_FECH FOREIGN KEY (ID_CAIXA_ABERT_FECH) REFERENCES CAIXA_ABERT_FECH (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE CAIXA_ENT_SAI ADD CONSTRAINT FK_CAIXA_ENT_SAI_CAIXA FOREIGN KEY (ID_CAIXA) REFERENCES CAIXA (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE CHEQUE ADD CONSTRAINT FK_CHEQUE_CONTA FOREIGN KEY (ID_BANCO) REFERENCES CONTA_BANCARIA (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE CLIENTE ADD FOREIGN KEY (COD_RAMOATIVIDADE) REFERENCES RAMO_ATIVIDADE (CODIGO) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE CLIENTE ADD FOREIGN KEY (COD_REPRESENTANTE) REFERENCES REPRESENTANTE (CODIGO) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE FABRICANTE ADD CONSTRAINT FK_FABRICANTE_GRUPO FOREIGN KEY (CODGRUPO) REFERENCES GRUPO_FABRICANTE (CODIGO) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE HISTORICO ADD CONSTRAINT FK_HISTORICO_GRUPO FOREIGN KEY (ID_GRUPO) REFERENCES HISTORICO_GRUPO (CODIGO) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE LANCAMENTO ADD CONSTRAINT FK_LANCAMENTO_CONTA FOREIGN KEY (ID_CONTA) REFERENCES CONTA_BANCARIA (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE LANCAMENTO ADD CONSTRAINT FK_LANCAMENTO_FORNECEDOR FOREIGN KEY (ID_FORNECEDOR) REFERENCES FABRICANTE (CODIGO) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE LANCAMENTO ADD CONSTRAINT FK_LANCAMENTO_HISTORICO FOREIGN KEY (ID_HISTORICO) REFERENCES HISTORICO (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE LOTE ADD CONSTRAINT FK_LOTE_PEDIDOVENDA FOREIGN KEY (ID_PEDIDO) REFERENCES PEDIDO_VENDA (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE LOTE_ITENS ADD CONSTRAINT FK_LOTE_ITENS_IDLOTE FOREIGN KEY (ID_LOTE) REFERENCES LOTE (LOTE) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE LOTE_MATPRIMA ADD CONSTRAINT FK_LOTE_MATPRIMA_IDLOTE FOREIGN KEY (ID_LOTE) REFERENCES LOTE (LOTE) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE LOTE_MATPRIMA ADD CONSTRAINT LOTE_MATPRIMA_IDMATPRIMA FOREIGN KEY (ID_MATPRIMA) REFERENCES PRODUTO (CODIGO) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE NOTA_ENTRADA ADD CONSTRAINT FK_NOTA_ENTRADA_CONDPAGTO FOREIGN KEY (ID_CONDPAGTO) REFERENCES CONDPAGTO (CODIGO) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE NOTA_ENTRADA ADD CONSTRAINT FK_NOTA_ENTRADA_HISTORICO FOREIGN KEY (ID_HISTORICO) REFERENCES HISTORICO (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE NOTA_ENTRADA ADD CONSTRAINT FK_NOTA_ENTRADA_USUARIO FOREIGN KEY (ID_USUARIO) REFERENCES USUARIO (USU_ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE NOTA_ENTRADA ADD CONSTRAINT NOTA_ENTRADA_FK FOREIGN KEY (CODFOR) REFERENCES FABRICANTE (CODIGO) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE NOTA_ENTRADA_ANEXO ADD CONSTRAINT NOTA_ENTRADA_ANEXO_NOTAENTRADA FOREIGN KEY (ID_NOTAENTRADA) REFERENCES NOTA_ENTRADA (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE NOTA_ENTRADA_ITENS ADD CONSTRAINT FK_NOTA_ENTRADA_ITENS_HISTORICO FOREIGN KEY (ID_HISTORICO) REFERENCES HISTORICO (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE NOTA_ENTRADA_ITENS ADD CONSTRAINT FK_NOTA_ENTRADA_ITENS_PRODUTO FOREIGN KEY (ID_PRODUTO) REFERENCES PRODUTO (CODIGO) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE NOTA_ENTRADA_ITENS ADD CONSTRAINT NOTA_ENTRADA_ITENS_NOTAENTRADA FOREIGN KEY (ID_NOTAENTRADA) REFERENCES NOTA_ENTRADA (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE NOTA_ENTRADA_PAGAR ADD CONSTRAINT FK_NOTA_ENTRADA_PAGAR_CAIXA FOREIGN KEY (ID_CAIXA) REFERENCES CAIXA (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE NOTA_ENTRADA_PAGAR ADD CONSTRAINT FK_NOTA_ENTRADA_PAGAR_CHEQUE FOREIGN KEY (ID_CONTA, CHEQUE_NUMERO) REFERENCES CHEQUE (ID_BANCO, NUM_CHEQUE) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE NOTA_ENTRADA_PAGAR ADD CONSTRAINT FK_NOTA_ENTRADA_PAGAR_CONTA FOREIGN KEY (ID_CONTA) REFERENCES CONTA_BANCARIA (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE NOTA_ENTRADA_PAGAR ADD CONSTRAINT FK_NOTA_ENTRADA_PAGAR_HISTORICO FOREIGN KEY (ID_HISTORICO) REFERENCES HISTORICO (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE NOTA_ENTRADA_PAGAR ADD CONSTRAINT FK_NOTA_ENTRADA_PAGAR_PAGTO FOREIGN KEY (ID_PAGTO) REFERENCES PAGTO_PARCELAMENTO (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE NOTA_ENTRADA_PAGAR ADD FOREIGN KEY (ID_NOTAENTRADA) REFERENCES NOTA_ENTRADA (ID) ON DELETE CASCADE ON UPDATE CASCADE
  USING INDEX INTEG_324;
ALTER TABLE NOTA_ENTRADA_PARCIAL ADD CONSTRAINT FK_NOTA_ENTRADA_PARCIAL_1 FOREIGN KEY (ID_NOTAENTRADA, NDUP) REFERENCES NOTA_ENTRADA_PAGAR (ID_NOTAENTRADA, NDUP) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE ORCAMENTO ADD CONSTRAINT FK_ORCAMENTO_CLIENTE FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE (CODIGO) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE ORCAMENTO ADD CONSTRAINT FK_ORCAMENTO_CONDPAGTO FOREIGN KEY (ID_FORMAPAGTO) REFERENCES CONDPAGTO (CODIGO) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE ORCAMENTO_ITEM ADD CONSTRAINT FK_ORCAMENTOITEM_ORC FOREIGN KEY (ID_ORCAMENTO) REFERENCES ORCAMENTO (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE ORCAMENTO_ITEM ADD CONSTRAINT FK_ORCAMENTOITEM_PROD FOREIGN KEY (ID_PROD) REFERENCES PRODUTO (CODIGO) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE ORCAMENTO_PAGTO ADD CONSTRAINT FK_ORCAMENTOPAGTO_ORC FOREIGN KEY (ID_ORCAMENTO) REFERENCES ORCAMENTO (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE PAGTO_PARCELAMENTO ADD CONSTRAINT FK_PAGTO_PARCELAMENTO_FORMA FOREIGN KEY (ID_PAGTOFORMA) REFERENCES PAGTO_FORMA (ID_PAGTOFORMA) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE PDV_CANCELAMENTO ADD CONSTRAINT FK_PDV_CANCELAMENTO_ITEM FOREIGN KEY (ID_VENDA, TIPO, ORDEM) REFERENCES PDV_ITENS (ID, TIPO, ORDEM) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE PDV_CANCELAMENTO ADD CONSTRAINT FK_PDV_CANCELAMENTO_PROD FOREIGN KEY (ID_PRODUTO) REFERENCES PRODUTO (CODIGO) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE PDV_DEVOLUCAO ADD CONSTRAINT FK_PDV_DEVOLUCAO_ITEM FOREIGN KEY (ID_VENDA, TIPO, ORDEM) REFERENCES PDV_ITENS (ID, TIPO, ORDEM) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE PDV_DEVOLUCAO ADD CONSTRAINT FK_PDV_DEVOLUCAO_PROD FOREIGN KEY (ID_PRODUTO) REFERENCES PRODUTO (CODIGO) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE PDV_ITENS ADD CONSTRAINT FK_PDV_ITENS_IDPRODUTO FOREIGN KEY (ID_PRODUTO) REFERENCES PRODUTO (CODIGO) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE PDV_ITENS ADD CONSTRAINT FK_PDV_ITENS_MASTER FOREIGN KEY (ID, TIPO) REFERENCES PDV_MASTER (ID, TIPO) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE PDV_MASTER ADD CONSTRAINT FK_PDV_MASTER_CAIXA FOREIGN KEY (ID_CAIXA) REFERENCES CAIXA (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE PDV_MASTER ADD CONSTRAINT FK_PDV_MASTER_CONDPAGTO FOREIGN KEY (ID_CREDIARIO) REFERENCES CONDPAGTO (CODIGO) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE PDV_MASTER ADD CONSTRAINT FK_PDV_MASTER_HIST FOREIGN KEY (ID_HISTORICO) REFERENCES HISTORICO (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE PDV_MASTER ADD CONSTRAINT FK_PDV_MASTER_IDCLIENTE FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE (CODIGO) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE PDV_RECEBER ADD CONSTRAINT FK_PDV_RECEBER_CONTA FOREIGN KEY (ID_CONTA) REFERENCES CONTA_BANCARIA (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE PDV_RECEBER ADD CONSTRAINT FK_PDV_RECEBER_HISTORICO FOREIGN KEY (ID_HISTORICO) REFERENCES HISTORICO (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE PDV_RECEBER ADD CONSTRAINT FK_PDV_RECEBER_MASTER FOREIGN KEY (ID, TIPO) REFERENCES PDV_MASTER (ID, TIPO) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE PDV_RECEBER_PARCIAL ADD CONSTRAINT FK_PDV_RECEBER FOREIGN KEY (ID, TIPO, ORDEM) REFERENCES PDV_RECEBER (ID, TIPO, ORDEM) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE PDV_RECEBER_PARCIAL ADD CONSTRAINT FK_RECEBER_PARCIAL_CONTA FOREIGN KEY (ID_CONTA) REFERENCES CONTA_BANCARIA (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE PDV_RECEBER_PARCIAL ADD CONSTRAINT FK_RECEBER_PARCIAL_HISTORICO FOREIGN KEY (ID_HISTORICO) REFERENCES HISTORICO (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE PEDIDO_VENDA ADD CONSTRAINT FK_PEDIDO_VENDA_CLIENTE FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE (CODIGO) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE PEDIDO_VENDA ADD CONSTRAINT FK_PEDIDO_VENDA_VENDEDOR FOREIGN KEY (ID_VENDEDOR) REFERENCES REPRESENTANTE (CODIGO) ON DELETE SET NULL ON UPDATE CASCADE
  USING INDEX FK_PEDIDO_VENDA_1;
ALTER TABLE PEDIDO_VENDA_IMG ADD CONSTRAINT FK_PEDIDO_VENDA_IMG_1 FOREIGN KEY (ID_PEDIDO) REFERENCES PEDIDO_VENDA (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE PEDIDO_VENDA_ITEM ADD CONSTRAINT FK_PEDIDO_VENDA_ITEM_PEDIDO FOREIGN KEY (ID_PEDIDO) REFERENCES PEDIDO_VENDA (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE PEDIDO_VENDA_ITEM ADD CONSTRAINT FK_PEDIDO_VENDA_ITEM_PRODUTO FOREIGN KEY (ID_PRODUTO) REFERENCES PRODUTO (CODIGO) ON DELETE SET NULL ON UPDATE CASCADE
  USING INDEX FK_PEDIDO_VENDA_ITEM_1;
ALTER TABLE PEDIDO_VENDA_STATUS ADD CONSTRAINT FK_PEDIDO_VENDA_STATUS_PEDIDO FOREIGN KEY (ID_PEDIDO) REFERENCES PEDIDO_VENDA (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE PRECOCUSTO_HISTORICO ADD CONSTRAINT FK_PRECOCUSTO_HISTORICO_PROD FOREIGN KEY (ID_PROD) REFERENCES PRODUTO (CODIGO) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE PRECOCUSTO_HISTORICO ADD CONSTRAINT PRCUSTO_NFENTRADA FOREIGN KEY (ID_NFENTRADA) REFERENCES NOTA_ENTRADA (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE PRECOVENDA_HISTORICO ADD CONSTRAINT FK_PRECOVENDA_HISTORICO_PROD FOREIGN KEY (ID_PROD) REFERENCES PRODUTO (CODIGO) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE PRODUTO ADD CONSTRAINT FK_PRODUTO_CEST FOREIGN KEY (FISCAL_CEST) REFERENCES CEST (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE PRODUTO ADD CONSTRAINT FK_PRODUTO_CONV_UNIDADE FOREIGN KEY (CONV_UNIDADE) REFERENCES UNIDADE (CODIGO) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE PRODUTO ADD CONSTRAINT FK_PRODUTO_NCM FOREIGN KEY (FISCAL_NCM) REFERENCES NCM (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE PRODUTO ADD FOREIGN KEY (COD_GRUPO) REFERENCES GRUPO_PROD (CODIGO) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE PRODUTO ADD FOREIGN KEY (COD_SUBGRUPO) REFERENCES SUBGRUPO_PROD (CODIGO) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE PRODUTO ADD FOREIGN KEY (COD_UNIDADE) REFERENCES UNIDADE (CODIGO) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE PRODUTO_COMPOSICAO ADD CONSTRAINT PRODUTO_COMPOSICAO_IDMATPRIMA FOREIGN KEY (ID_MATPRIMA) REFERENCES PRODUTO (CODIGO) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE PRODUTO_COMPOSICAO ADD CONSTRAINT PRODUTO_COMPOSICAO_IDPRODUTO FOREIGN KEY (ID_PRODUTO) REFERENCES PRODUTO (CODIGO) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE PRODUTO_FORNECEDOR ADD CONSTRAINT PRODUTO_FORNECEDOR_IDFORNECEDOR FOREIGN KEY (ID_FORNECEDOR) REFERENCES FABRICANTE (CODIGO) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE PRODUTO_FORNECEDOR ADD CONSTRAINT PRODUTO_FORNECEDOR_IDPRODUTO FOREIGN KEY (ID_PRODUTO) REFERENCES PRODUTO (CODIGO) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE TRANSPORTADORA ADD FOREIGN KEY (COD_EST) REFERENCES ESTADO (SIGLA) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE TRANSPORTADORA ADD FOREIGN KEY (COD_PAIS) REFERENCES PAIS (CODIGO) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE TRANSPORTADORA ADD FOREIGN KEY (CODFORNECEDOR) REFERENCES FABRICANTE (CODIGO) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE USUARIO ADD CONSTRAINT FK_USUARIO_1 FOREIGN KEY (ID_GRUPO) REFERENCES USUARIO_GRUPO (ID);


/******************************************************************************/
/***                                Indices                                 ***/
/******************************************************************************/

CREATE INDEX CLIENTE_IDX_DTULTCOMPRA ON CLIENTE (DATA_ULTIMACOMPRA);
CREATE INDEX CLIENTE_IDX_NOMERAZAO ON CLIENTE (NOME_RAZAO);
CREATE INDEX NOTA_ENTRADA_IDXDTENTRADA ON NOTA_ENTRADA (ENTRADA);
CREATE INDEX NOTA_ENTRADA_IDX_NNF ON NOTA_ENTRADA (N_NF);
CREATE INDEX NF_ENTRADA_IDX_DATABAIXA ON NOTA_ENTRADA_PAGAR (BAIXA_DATA);
CREATE INDEX NF_ENTRADA_IDX_VENCTO ON NOTA_ENTRADA_PAGAR (DVENC);
CREATE INDEX PDV_MASTER_EMISSAO ON PDV_MASTER (EMISSAO);
CREATE INDEX PDV_MASTER_STATUS ON PDV_MASTER (STATUS);
CREATE INDEX PDV_RECEBER_IDXDATABAIXA ON PDV_RECEBER (DT_BAIXA);
CREATE INDEX PDV_RECEBER_IDXVENCTO ON PDV_RECEBER (DT_VENC);
CREATE INDEX PDV_RECEBER_PARCIAL_IDX1 ON PDV_RECEBER_PARCIAL (DT_BAIXA);
CREATE INDEX PEDIDO_VENDA_IDX_EMISSAO ON PEDIDO_VENDA (EMISSAO);
CREATE INDEX PEDIDO_VENDA_IDX_STATUS ON PEDIDO_VENDA (STATUS);
CREATE INDEX PRODUTO_IDX_TIPOPRODUTO ON PRODUTO (TIPO_PRODUTO);
CREATE INDEX USUARIO_IDX1 ON USUARIO (USU_SENHA);
CREATE INDEX USUARIO_IDX_IDVENDEDOR ON USUARIO (ID_VENDEDOR);


/******************************************************************************/
/***                                Triggers                                ***/
/******************************************************************************/



SET TERM ^ ;



/******************************************************************************/
/***                          Triggers for tables                           ***/
/******************************************************************************/



/* Trigger: TRI_AD_ESTOQUE */
CREATE TRIGGER TRI_AD_ESTOQUE FOR NOTA_ENTRADA_ITENS
ACTIVE AFTER DELETE POSITION 0
AS
begin
  if (OLD.QTDE is not null) then
  begin
    execute procedure PRO_ENTRADA_SAIDA(old.ID_PRODUTO,old.QTDE,'-') ;
  end
end
^


/* Trigger: TRI_AD_LOTEITENS_ESTOQUE */
CREATE TRIGGER TRI_AD_LOTEITENS_ESTOQUE FOR LOTE_ITENS
ACTIVE AFTER DELETE POSITION 0
AS
begin
  if (old.qtde_fechada is not null) then
  begin
    execute procedure PRO_ENTRADA_SAIDA(old.CODPRO,old.QTDE_FECHADA,'-') ;
  end
end
^


/* Trigger: TRI_AD_LOTEMATPRIMA_ESTOQUE */
CREATE TRIGGER TRI_AD_LOTEMATPRIMA_ESTOQUE FOR LOTE_MATPRIMA
ACTIVE AFTER DELETE POSITION 0
AS
begin
  if (old.QTDE_FECHADA is not null) then
  begin
    execute procedure PRO_ENTRADA_SAIDA(old.ID_MATPRIMA,old.QTDE_FECHADA,'+') ;
  end
end
^


/* Trigger: TRI_AD_PDVCANCELAMENTO_ESTOQUE */
CREATE TRIGGER TRI_AD_PDVCANCELAMENTO_ESTOQUE FOR PDV_CANCELAMENTO
ACTIVE AFTER DELETE POSITION 0
AS
begin
  execute procedure PRO_ENTRADA_SAIDA(old.ID_PRODUTO,old.QTDE_BAIXA,'-') ;
end
^


/* Trigger: TRI_AD_PDVITENS_ESTOQUE */
CREATE TRIGGER TRI_AD_PDVITENS_ESTOQUE FOR PDV_ITENS
ACTIVE AFTER DELETE POSITION 0
as
begin
 execute procedure PRO_ENTRADA_SAIDA(old.ID_PRODUTO,old.QTDE_BAIXA,'+') ;
end
^


/* Trigger: TRI_AD_PDVRECEBER_DEBITO_CLI */
CREATE TRIGGER TRI_AD_PDVRECEBER_DEBITO_CLI FOR PDV_RECEBER
ACTIVE AFTER DELETE POSITION 0
AS

BEGIN
    if (old.FORMA_PAGTO = 'CREDIARIO') then
    begin
      update CLIENTE a
      set a.VL_DEBITO = (SELECT coalesce(p.VALOR,0) valor
                         FROM PRO_UPDATE_DEBITO_CLIENTE ((select b.id_cliente from PDV_MASTER b where b.tipo = old.TIPO and b.id = old.ID)) p)
      where a.CODIGO = (select b.id_cliente from PDV_MASTER b where b.tipo = old.TIPO and b.id = old.ID);
    end                   
END
^


/* Trigger: TRI_AD_PDV_DEVOLUCAO_ESTOQUE */
CREATE TRIGGER TRI_AD_PDV_DEVOLUCAO_ESTOQUE FOR PDV_DEVOLUCAO
ACTIVE AFTER DELETE POSITION 0
AS
begin
  execute procedure PRO_ENTRADA_SAIDA(old.ID_PRODUTO,old.QTDE_BAIXA,'-') ;
end
^


/* Trigger: TRI_AD_PEDIDO_VENDA_ITEM */
CREATE TRIGGER TRI_AD_PEDIDO_VENDA_ITEM FOR PEDIDO_VENDA_ITEM
ACTIVE AFTER DELETE POSITION 0
as
begin
  execute procedure PRO_ENTRADA_SAIDA(old.ID_PRODUTO, old.QTDE_BAIXADA, '+');
end
^


/* Trigger: TRI_AD_PEDIDO_VENDA_RECEBER */
CREATE TRIGGER TRI_AD_PEDIDO_VENDA_RECEBER FOR PEDIDO_VENDA
ACTIVE AFTER DELETE POSITION 0
AS
begin
  delete from contas_a_receber c
  where c.tipo = 1 and
  c.id_tabela_master = old.id;
end
^


/* Trigger: TRI_AIU_PDVRECEBER_DEBITO_CLI */
CREATE TRIGGER TRI_AIU_PDVRECEBER_DEBITO_CLI FOR PDV_RECEBER
ACTIVE AFTER INSERT OR UPDATE POSITION 0
AS

BEGIN
    if (new.FORMA_PAGTO = 'CREDIARIO') then
    begin
      update CLIENTE a
      set a.VL_DEBITO = (SELECT coalesce(p.VALOR,0) valor
                         FROM PRO_UPDATE_DEBITO_CLIENTE ((select b.id_cliente from PDV_MASTER b where b.tipo = new.TIPO and b.id = new.ID)) p)
      where a.CODIGO = (select b.id_cliente from PDV_MASTER b where b.tipo = new.TIPO and b.id = new.ID);
    end                   
END
^


/* Trigger: TRI_AI_DEBITO_CLI_PARCIAL */
CREATE TRIGGER TRI_AI_DEBITO_CLI_PARCIAL FOR PDV_RECEBER_PARCIAL
ACTIVE AFTER INSERT POSITION 0
AS
BEGIN
  update CLIENTE c
  set c.VL_DEBITO = c.VL_DEBITO - new.VALOR
  where c.CODIGO = (select b.ID_CLIENTE from PDV_MASTER b where b.ID = new.ID and b.TIPO = new.TIPO);
END
^


/* Trigger: TRI_AI_ESTOQUE */
CREATE TRIGGER TRI_AI_ESTOQUE FOR NOTA_ENTRADA_ITENS
ACTIVE AFTER INSERT POSITION 0
AS
begin
  if (NEW.QTDE is not null) then
  begin
    execute procedure PRO_ENTRADA_SAIDA(new.ID_PRODUTO,new.QTDE,'+') ;
  end
end
^


/* Trigger: TRI_AI_LOTEITENS_ESTOQUE */
CREATE TRIGGER TRI_AI_LOTEITENS_ESTOQUE FOR LOTE_ITENS
ACTIVE AFTER INSERT POSITION 0
AS
begin
  if (NEW.QTDE_FECHADA is not null) then
  begin
    execute procedure PRO_ENTRADA_SAIDA(new.CODPRO,new.QTDE_FECHADA,'+') ;
  end
end
^


/* Trigger: TRI_AI_LOTEMATPRIMA_ESTOQUE */
CREATE TRIGGER TRI_AI_LOTEMATPRIMA_ESTOQUE FOR LOTE_MATPRIMA
ACTIVE AFTER INSERT POSITION 0
AS
begin
  if (NEW.QTDE_FECHADA is not null) then
  begin
    execute procedure PRO_ENTRADA_SAIDA(new.ID_MATPRIMA,new.QTDE_FECHADA,'-') ;
  end
end
^


/* Trigger: TRI_AI_NFITENSPRECOCUSTO */
CREATE TRIGGER TRI_AI_NFITENSPRECOCUSTO FOR NOTA_ENTRADA_ITENS
ACTIVE AFTER INSERT POSITION 0
as
begin
  if (new.PRECO_CUSTO > 0) then
  begin
    update PRODUTO A
    set A.PRECO_CUSTO = new.PRECO_CUSTO
    where A.CODIGO = new.ID_PRODUTO;

    if (exists(select A.CODIGO
               from PRODUTO A
               where A.CODIGO = new.id_produto)) then
    begin
      execute procedure PRO_HIST_PRECOCUSTO('U', new.ID_PRODUTO, new.PRECO_CUSTO, null, new.ID_NOTAENTRADA);
    end
    else
    begin
      execute procedure PRO_HIST_PRECOCUSTO('I', new.ID_PRODUTO, new.PRECO_CUSTO, null, new.ID_NOTAENTRADA);
    end
  end
end
^


/* Trigger: TRI_AI_PDVCANCELAMENTO_ESTOQUE */
CREATE TRIGGER TRI_AI_PDVCANCELAMENTO_ESTOQUE FOR PDV_CANCELAMENTO
ACTIVE AFTER INSERT POSITION 0
AS
begin
  execute procedure PRO_ENTRADA_SAIDA(new.id_produto,new.qtde_baixa,'+') ;
end
^


/* Trigger: TRI_AI_PDVDEVOLUCAO_ESTOQUE */
CREATE TRIGGER TRI_AI_PDVDEVOLUCAO_ESTOQUE FOR PDV_DEVOLUCAO
ACTIVE AFTER INSERT POSITION 0
AS
begin
  execute procedure PRO_ENTRADA_SAIDA(new.id_produto,new.qtde_baixa,'+') ;
end
^


/* Trigger: TRI_AI_PDVITENS_ESTOQUE */
CREATE TRIGGER TRI_AI_PDVITENS_ESTOQUE FOR PDV_ITENS
ACTIVE AFTER INSERT POSITION 0
as
begin
  execute procedure PRO_ENTRADA_SAIDA(new.ID_PRODUTO,new.QTDE_BAIXA,'-') ;
end
^


/* Trigger: TRI_AI_PDVMASTER_DTCOMPRA */
CREATE TRIGGER TRI_AI_PDVMASTER_DTCOMPRA FOR PDV_MASTER
ACTIVE AFTER INSERT POSITION 0
as
begin
  update CLIENTE C
  set C.DATA_ULTIMACOMPRA = current_date
  where C.CODIGO = new.ID_CLIENTE;
end
^


/* Trigger: TRI_AI_PEDIDO_VENDA_ITEM */
CREATE TRIGGER TRI_AI_PEDIDO_VENDA_ITEM FOR PEDIDO_VENDA_ITEM
ACTIVE AFTER INSERT POSITION 0
as
begin
  execute procedure PRO_ENTRADA_SAIDA(new.ID_PRODUTO, new.QTDE_BAIXADA, '-');
end
^


/* Trigger: TRI_AI_PEDIDO_VENDA_STATUS */
CREATE TRIGGER TRI_AI_PEDIDO_VENDA_STATUS FOR PEDIDO_VENDA
ACTIVE AFTER INSERT POSITION 0
as
begin
  insert into PEDIDO_VENDA_STATUS (ID_PEDIDO, USUARIO, DATA_HORA)
  values (new.ID, new.USUARIO, localtimestamp);
end
^


/* Trigger: TRI_AI_PEDIDO_VENDA_STATUS_0 */
CREATE TRIGGER TRI_AI_PEDIDO_VENDA_STATUS_0 FOR PEDIDO_VENDA_STATUS
ACTIVE AFTER INSERT POSITION 0
as
begin
  update PEDIDO_VENDA P
  set P.STATUS = new.STATUS
  where P.ID = new.ID_PEDIDO;
end
^


/* Trigger: TRI_AI_PRODHISTPRECOCUSTO */
CREATE TRIGGER TRI_AI_PRODHISTPRECOCUSTO FOR PRODUTO
ACTIVE AFTER INSERT POSITION 0
AS
begin
  execute procedure pro_hist_precocusto('I',new.codigo,new.preco_custo,substring(new.ultima_alteracao from 1 for (position('|',new.ultima_alteracao)-1)),null);
end
^


/* Trigger: TRI_AI_PRODUTO */
CREATE TRIGGER TRI_AI_PRODUTO FOR PRODUTO
ACTIVE AFTER INSERT POSITION 0
AS
begin
  execute procedure pro_hist_precovenda('I',new.codigo,substring(new.ultima_alteracao from 1 for (position('|',new.ultima_alteracao)-1)),new.preco_venda);
end
^


/* Trigger: TRI_AU_ESTOQUE */
CREATE TRIGGER TRI_AU_ESTOQUE FOR NOTA_ENTRADA_ITENS
ACTIVE AFTER UPDATE POSITION 0
as
begin
  execute procedure PRO_ENTRADA_SAIDA(old.ID_PRODUTO, old.QTDE, '-');
  execute procedure PRO_ENTRADA_SAIDA(new.ID_PRODUTO, new.QTDE, '+');
end
^


/* Trigger: TRI_AU_LOTEITENS_ESTOQUE */
CREATE TRIGGER TRI_AU_LOTEITENS_ESTOQUE FOR LOTE_ITENS
ACTIVE AFTER UPDATE POSITION 0
as
begin
  execute procedure PRO_ENTRADA_SAIDA(old.CODPRO,old.QTDE_FECHADA,'-') ;
  execute procedure PRO_ENTRADA_SAIDA(new.CODPRO,new.QTDE_FECHADA,'+') ;
end
^


/* Trigger: TRI_AU_LOTEMATPRIMA_ESTOQUE */
CREATE TRIGGER TRI_AU_LOTEMATPRIMA_ESTOQUE FOR LOTE_MATPRIMA
ACTIVE AFTER UPDATE POSITION 0
as
begin
  execute procedure PRO_ENTRADA_SAIDA(old.ID_MATPRIMA,old.QTDE_FECHADA,'+') ;
  execute procedure PRO_ENTRADA_SAIDA(new.ID_MATPRIMA,new.QTDE_FECHADA,'-') ;
end
^


/* Trigger: TRI_AU_PDVCANCELAMENTO_ESTOQUE */
CREATE TRIGGER TRI_AU_PDVCANCELAMENTO_ESTOQUE FOR PDV_CANCELAMENTO
ACTIVE AFTER UPDATE POSITION 0
AS
begin
  execute procedure PRO_ENTRADA_SAIDA(old.ID_PRODUTO,old.QTDE_BAIXA,'-') ;
  execute procedure PRO_ENTRADA_SAIDA(new.ID_PRODUTO,new.QTDE_BAIXA,'+') ;
end
^


/* Trigger: TRI_AU_PDVDEVOLUCAO_ESTOQUE */
CREATE TRIGGER TRI_AU_PDVDEVOLUCAO_ESTOQUE FOR PDV_DEVOLUCAO
ACTIVE AFTER UPDATE POSITION 0
AS
begin
  execute procedure PRO_ENTRADA_SAIDA(old.ID_PRODUTO,old.QTDE_BAIXA,'-') ;
  execute procedure PRO_ENTRADA_SAIDA(new.ID_PRODUTO,new.QTDE_BAIXA,'+') ;
end
^


/* Trigger: TRI_AU_PDVITENS_ESTOQUE */
CREATE TRIGGER TRI_AU_PDVITENS_ESTOQUE FOR PDV_ITENS
ACTIVE AFTER UPDATE POSITION 0
as
begin
 execute procedure PRO_ENTRADA_SAIDA(old.ID_PRODUTO,old.QTDE_BAIXA,'+') ;
 execute procedure PRO_ENTRADA_SAIDA(new.ID_PRODUTO,new.QTDE_BAIXA,'-') ;
end
^


/* Trigger: TRI_AU_PEDIDO_VENDA_ITEM */
CREATE TRIGGER TRI_AU_PEDIDO_VENDA_ITEM FOR PEDIDO_VENDA_ITEM
ACTIVE AFTER UPDATE POSITION 0
as
begin
  execute procedure PRO_ENTRADA_SAIDA(old.ID_PRODUTO, old.QTDE_BAIXADA, '+');
  execute procedure PRO_ENTRADA_SAIDA(new.ID_PRODUTO, new.QTDE_BAIXADA, '-');
end
^


/* Trigger: TRI_AU_PRODUTO_COMPOSICAO_0 */
CREATE TRIGGER TRI_AU_PRODUTO_COMPOSICAO_0 FOR PRODUTO_COMPOSICAO
ACTIVE AFTER UPDATE POSITION 0
as
begin
  execute procedure PRO_UPD_PRODUTO_CUSTO(new.ID_PRODUTO,
      coalesce((select cast(sum(PC.CUSTO_TOTAL) as numeric(10,2)) from PRODUTO_COMPOSICAO PC where PC.ID_PRODUTO = new.ID_PRODUTO), 0));
end
^


/* Trigger: TRI_BI_CAIXA */
CREATE TRIGGER TRI_BI_CAIXA FOR CAIXA
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    if((new.ID = 0) or (new.id is null)) then
    begin
      new.ID = gen_id(GEN_CAIXA,1);
    end
END
^


/* Trigger: TRI_BI_CAIXA_ABERT_FECH */
CREATE TRIGGER TRI_BI_CAIXA_ABERT_FECH FOR CAIXA_ABERT_FECH
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    if((new.ID = 0) or (new.id is null)) then
    begin
      new.ID = gen_id(GEN_CAIXA_ABERT_FECH,1);
    end
END
^


/* Trigger: TRI_BI_CAIXA_APURACAO_VALORES */
CREATE TRIGGER TRI_BI_CAIXA_APURACAO_VALORES FOR CAIXA_APURACAO_VALORES
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    if((new.ID = 0) or (new.id is null)) then
    begin
      new.ID = gen_id(GEN_CAIXA_APURACAO_VALORES,1);
    end
END
^


/* Trigger: TRI_BI_CAIXA_ENT_SAI */
CREATE TRIGGER TRI_BI_CAIXA_ENT_SAI FOR CAIXA_ENT_SAI
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    if((new.ID = 0) or (new.id is null)) then
    begin
      new.ID = gen_id(GEN_CAIXA_ENT_SAI,1);
    end
END
^


/* Trigger: TRI_BI_CEST */
CREATE TRIGGER TRI_BI_CEST FOR CEST
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_cest_id,1);
end
^


/* Trigger: TRI_BI_CIDADE */
CREATE TRIGGER TRI_BI_CIDADE FOR CIDADE
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_cidades_id,1);
end
^


/* Trigger: TRI_BI_CLIENTE */
CREATE TRIGGER TRI_BI_CLIENTE FOR CLIENTE
ACTIVE BEFORE INSERT POSITION 0
AS
declare variable mcodigo integer;
begin
  new.cliente_default = 'N';
  if ((new.codigo = 0) or (new.codigo is null)) then
   begin
    new.vl_credito = 0;
    new.vl_debito = 0;
    select max(codigo) from CLIENTE into :mCodigo ;
     if (mCodigo is null) then
     begin
       mCodigo = 0 ;
     end
     new.codigo = mCodigo + 1 ;
   end
end
^


/* Trigger: TRI_BI_CONDPAGTO */
CREATE TRIGGER TRI_BI_CONDPAGTO FOR CONDPAGTO
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF ((NEW.CODIGO IS NULL) OR (NEW.CODIGO = 0)) then
   new.CODIGO = gen_id(GEN_CONDPAGTO,1) ;
END
^


/* Trigger: TRI_BI_CONTABANCARIA */
CREATE TRIGGER TRI_BI_CONTABANCARIA FOR CONTA_BANCARIA
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if ((new.ID = 0) or (new.ID is null)) then
   begin
    new.ID = gen_id(GEN_CONTABANCARIA,1) ;
   end
end
^


/* Trigger: TRI_BI_EMPRESA */
CREATE TRIGGER TRI_BI_EMPRESA FOR EMPRESA
ACTIVE BEFORE INSERT POSITION 0
AS
declare variable mcodigo integer;
begin
  if ((new.codigo = 0) or (new.codigo is null)) then
   begin
    select max(codigo) from EMPRESA into :mCodigo ;
     if (mCodigo is null) then
     begin
       mCodigo = 0 ;
     end
     new.codigo = mCodigo + 1 ;
  end
end
^


/* Trigger: TRI_BI_FABRICANTE */
CREATE TRIGGER TRI_BI_FABRICANTE FOR FABRICANTE
ACTIVE BEFORE INSERT POSITION 0
as
declare variable mcd integer ;
begin
  if ((new.codigo = 0) or (new.codigo is null)) then
  begin
    select max(codigo) from FABRICANTE into :mcd ;
    if (mcd is null) then
    begin
      mcd = 0 ;
    end
    new.codigo = mcd + 1 ;
  end
end
^


/* Trigger: TRI_BI_FUNCIONARIO */
CREATE TRIGGER TRI_BI_FUNCIONARIO FOR FUNCIONARIO
ACTIVE BEFORE INSERT POSITION 0
as
declare variable mcd integer ;
begin
  if ((new.codigo = 0) or (new.codigo is null)) then
  begin
    select max(codigo) from FUNCIONARIO into :mcd ;
    if (mcd is null) then
    begin
      mcd = 0 ;
    end
    new.codigo = mcd + 1 ;
  end
end
^


/* Trigger: TRI_BI_GRUPOFABRICANTE */
CREATE TRIGGER TRI_BI_GRUPOFABRICANTE FOR GRUPO_FABRICANTE
ACTIVE BEFORE INSERT POSITION 0
AS
declare variable mcodigo integer;
begin
  if ((new.codigo = 0) or (new.codigo is null)) then
   begin
    select max(codigo) from GRUPO_FABRICANTE into :mCodigo ;
     if (mCodigo is null) then
     begin
       mCodigo = 0 ;
     end
     new.codigo = mCodigo + 1 ;
  end
end
^


/* Trigger: TRI_BI_GRUPOPROD */
CREATE TRIGGER TRI_BI_GRUPOPROD FOR GRUPO_PROD
ACTIVE BEFORE INSERT POSITION 0
AS
declare variable mcodigo integer;
begin
  if ((new.codigo = 0) or (new.codigo is null)) then
   begin
    select max(codigo) from grupo_prod into :mCodigo ;
     if (mCodigo is null) then
     begin
       mCodigo = 0 ;
     end
     new.codigo = mCodigo + 1 ;
  end
end
^


/* Trigger: TRI_BI_HISTORICO */
CREATE TRIGGER TRI_BI_HISTORICO FOR HISTORICO
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    if((new.ID = 0) or (new.id is null)) then
    begin
      new.ID = gen_id(GEN_HISTORICO,1);
    end
END
^


/* Trigger: TRI_BI_HISTORICOGRUPO */
CREATE TRIGGER TRI_BI_HISTORICOGRUPO FOR HISTORICO_GRUPO
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    if((new.CODIGO = 0) or (new.CODIGO is null)) then
    begin
      new.CODIGO = gen_id(GEN_HISTORICO_GRUPO,1);
    end
END
^


/* Trigger: TRI_BI_HIST_PRECOCUSTO */
CREATE TRIGGER TRI_BI_HIST_PRECOCUSTO FOR PRECOCUSTO_HISTORICO
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    if((new.ID = 0) or (new.id is null)) then
    begin
      new.ID = gen_id(GEN_HIS_PRECOCUSTO,1);
    end
END
^


/* Trigger: TRI_BI_LANCAMENTO */
CREATE TRIGGER TRI_BI_LANCAMENTO FOR LANCAMENTO
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    if((new.ID = 0) or (new.id is null)) then
    begin
      new.ID = gen_id(GEN_LANCAMENTO,1);
    end
END
^


/* Trigger: TRI_BI_LOTE */
CREATE TRIGGER TRI_BI_LOTE FOR LOTE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF ((NEW.ID IS NULL) OR (NEW.ID = 0)) then
   new.ID = gen_id(GEN_LOTE,1) ;
END
^


/* Trigger: TRI_BI_LOTEITENS */
CREATE TRIGGER TRI_BI_LOTEITENS FOR LOTE_ITENS
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF ((NEW.ID IS NULL) OR (NEW.ID = 0)) then
   new.ID = gen_id(GEN_LOTE_ITENS,1) ;
END
^


/* Trigger: TRI_BI_LOTEMATPRIMA */
CREATE TRIGGER TRI_BI_LOTEMATPRIMA FOR LOTE_MATPRIMA
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF ((NEW.ID IS NULL) OR (NEW.ID = 0)) then
    new.ID = gen_id(GEN_LOTE_MATPRIMA,1) ;
END
^


/* Trigger: TRI_BI_NCM */
CREATE TRIGGER TRI_BI_NCM FOR NCM
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_ncm_id,1);
end
^


/* Trigger: TRI_BI_NOTAENTRADA */
CREATE TRIGGER TRI_BI_NOTAENTRADA FOR NOTA_ENTRADA
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    if((new.ID = 0) or (new.id is null)) then
    begin
      new.ID = gen_id(GEN_NOTAENTRADA,1);
    end
END
^


/* Trigger: TRI_BI_NOTAENTRADA_ITENS2 */
CREATE TRIGGER TRI_BI_NOTAENTRADA_ITENS2 FOR NOTA_ENTRADA_ITENS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    if((new.ID_NOTAENTRADA = 0) or (new.ID_NOTAENTRADA is null)) then
    begin
      new.ID_NOTAENTRADA = gen_id(GEN_NOTAENTRADA,0);
    end
END
^


/* Trigger: TRI_BI_NOTAENTRADA_PAGAR2 */
CREATE TRIGGER TRI_BI_NOTAENTRADA_PAGAR2 FOR NOTA_ENTRADA_PAGAR
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    if((new.ID_NOTAENTRADA = 0) or (new.ID_NOTAENTRADA is null)) then
    begin
      new.ID_NOTAENTRADA = gen_id(GEN_NOTAENTRADA,0);
    end
END
^


/* Trigger: TRI_BI_ORCAMENTO */
CREATE TRIGGER TRI_BI_ORCAMENTO FOR ORCAMENTO
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    if((new.ID = 0) or (new.id is null)) then
    begin
      new.ID = gen_id(GEN_ORCAMENTO,1);
    end
END
^


/* Trigger: TRI_BI_ORCAMENTOITEM */
CREATE TRIGGER TRI_BI_ORCAMENTOITEM FOR ORCAMENTO_ITEM
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    if((new.ID_ORCAMENTO = 0) or (new.ID_ORCAMENTO is null)) then
    begin
      new.ID_ORCAMENTO = gen_id(GEN_ORCAMENTO,0);
    end
END
^


/* Trigger: TRI_BI_ORCAMENTOPAGTO */
CREATE TRIGGER TRI_BI_ORCAMENTOPAGTO FOR ORCAMENTO_PAGTO
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    if((new.ID_ORCAMENTO = 0) or (new.ID_ORCAMENTO is null)) then
    begin
      new.ID_ORCAMENTO = gen_id(GEN_ORCAMENTO,0);
    end
END
^


/* Trigger: TRI_BI_PAGTOFORMA */
CREATE TRIGGER TRI_BI_PAGTOFORMA FOR PAGTO_FORMA
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    if((new.ID_PAGTOFORMA = 0) or (new.ID_PAGTOFORMA is null)) then
    begin
      new.ID_PAGTOFORMA = gen_id(GEN_PAGTOFORMA,1);
    end
END
^


/* Trigger: TRI_BI_PAGTOPARCELAMENTO */
CREATE TRIGGER TRI_BI_PAGTOPARCELAMENTO FOR PAGTO_PARCELAMENTO
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    if((new.ID_PAGTOFORMA = 0) or (new.ID_PAGTOFORMA is null)) then
    begin
      new.ID_PAGTOFORMA = gen_id(GEN_PAGTOFORMA,0);
    end
    
    if((new.ID = 0) or (new.ID is null)) then
    begin
      new.ID = gen_id(GEN_PAGTOPARCELAMENTO,1);
    end
END
^


/* Trigger: TRI_BI_PAIS */
CREATE TRIGGER TRI_BI_PAIS FOR PAIS
ACTIVE BEFORE INSERT POSITION 0
AS
declare variable mcodigo integer;
begin
  if ((new.codigo = 0) or (new.codigo is null)) then
   begin
    select max(codigo) from PAIS into :mCodigo ;
     if (mCodigo is null) then
     begin
       mCodigo = 0 ;
     end
     new.codigo = mCodigo + 1 ;
  end
end
^


/* Trigger: TRI_BI_PRECOHISTORICO */
CREATE TRIGGER TRI_BI_PRECOHISTORICO FOR PRECOVENDA_HISTORICO
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    if((new.ID = 0) or (new.id is null)) then
    begin
      new.ID = gen_id(GEN_PRECOHISTORICO,1);
    end
END
^


/* Trigger: TRI_BI_PRODUTO */
CREATE TRIGGER TRI_BI_PRODUTO FOR PRODUTO
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if ((new.codigo = 0) or (new.codigo is null)) then
   begin
    NEW.CODIGO = gen_id( GEN_PRODUTO, 1 );
  end
end
^


/* Trigger: TRI_BI_PRODUTOFORNECEDOR */
CREATE TRIGGER TRI_BI_PRODUTOFORNECEDOR FOR PRODUTO_FORNECEDOR
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if((new.id_produto = 0) or (new.id_produto is null)) then
    begin
      new.id_produto = gen_id(gen_produto,0);
    end
end
^


/* Trigger: TRI_BI_RAMOATIVIDADE */
CREATE TRIGGER TRI_BI_RAMOATIVIDADE FOR RAMO_ATIVIDADE
ACTIVE BEFORE INSERT POSITION 0
AS
declare variable mcodigo integer;
begin
  if ((new.codigo = 0) or (new.codigo is null)) then
   begin
    select max(codigo) from RAMO_ATIVIDADE into :mCodigo ;
     if (mCodigo is null) then
     begin
       mCodigo = 0 ;
     end
     new.codigo = mCodigo + 1 ;
  end
end
^


/* Trigger: TRI_BI_RECEBER_PARCIAL */
CREATE TRIGGER TRI_BI_RECEBER_PARCIAL FOR PDV_RECEBER_PARCIAL
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
     if ((new.codigo = 0) or (new.codigo is null)) then
   begin
    NEW.CODIGO = gen_id( GEN_RECEBER_PARCIAL, 1 );
  end
END
^


/* Trigger: TRI_BI_REPRESENTANTE */
CREATE TRIGGER TRI_BI_REPRESENTANTE FOR REPRESENTANTE
ACTIVE BEFORE INSERT POSITION 0
AS
declare variable mcodigo integer;
begin
  if ((new.codigo = 0) or (new.codigo is null)) then
   begin
    select max(codigo) from REPRESENTANTE into :mCodigo ;
     if (mCodigo is null) then
     begin
       mCodigo = 0 ;
     end
     new.codigo = mCodigo + 1 ;
  end
end
^


/* Trigger: TRI_BI_SUBGRUPOPROD */
CREATE TRIGGER TRI_BI_SUBGRUPOPROD FOR SUBGRUPO_PROD
ACTIVE BEFORE INSERT POSITION 0
AS
declare variable mcodigo integer;
begin
  if ((new.codigo = 0) or (new.codigo is null)) then
   begin
    select max(codigo) from subgrupo_prod into :mCodigo ;
     if (mCodigo is null) then
     begin
       mCodigo = 0 ;
     end
     new.codigo = mCodigo + 1 ;
  end
end
^


/* Trigger: TRI_BI_TRANSPORTADORA */
CREATE TRIGGER TRI_BI_TRANSPORTADORA FOR TRANSPORTADORA
ACTIVE BEFORE INSERT POSITION 0
as
declare variable mcd integer ;
begin
  if ((new.codigo = 0) or (new.codigo is null)) then
  begin
    select max(codigo) from TRANSPORTADORA into :mcd ;
    if (mcd is null) then
    begin
      mcd = 0 ;
    end
    new.codigo = mcd + 1 ;
  end
end
^


/* Trigger: TRI_BI_UNIDADE */
CREATE TRIGGER TRI_BI_UNIDADE FOR UNIDADE
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF ((NEW.CODIGO IS NULL) OR (NEW.CODIGO = 0)) then
   new.CODIGO = gen_id(GEN_UNIDADE,1) ;
END
^


/* Trigger: TRI_BI_USUARIO */
CREATE TRIGGER TRI_BI_USUARIO FOR USUARIO
ACTIVE BEFORE INSERT POSITION 0
as
declare variable mcd integer ;
begin
  if ((new.usu_id = 0) or (new.usu_id is null)) then
  begin
    select max(usu_id) from USUARIO into :mcd ;
    if (mcd is null) then
    begin
      mcd = 0 ;
    end
    new.usu_id = mcd + 1 ;
  end
end
^


/* Trigger: TRI_BU_NF_ITENS */
CREATE TRIGGER TRI_BU_NF_ITENS FOR NOTA_ENTRADA_ITENS
ACTIVE BEFORE UPDATE POSITION 0
AS
begin
  if ((new.preco_custo > 0) and (new.preco_custo <> old.preco_custo)) then
  begin
    update PRODUTO A
    set A.PRECO_CUSTO = new.PRECO_CUSTO
    where A.CODIGO = new.ID_PRODUTO;

    execute procedure pro_hist_precocusto('U',new.id_produto,new.preco_custo,null, new.id_notaentrada);
  end
end
^


/* Trigger: TRI_BU_PRODHISTPRECOCUSTO */
CREATE TRIGGER TRI_BU_PRODHISTPRECOCUSTO FOR PRODUTO
ACTIVE BEFORE UPDATE POSITION 0
as
begin
  execute procedure PRO_HIST_PRECOCUSTO('U', new.CODIGO, new.PRECO_CUSTO,
      substring(new.ULTIMA_ALTERACAO from 1 for (position('|', new.ULTIMA_ALTERACAO) - 1)), null);

  if (old.PRECO_CUSTO <> new.PRECO_CUSTO) then
  begin
    update PRODUTO_COMPOSICAO PC
    set PC.CUSTO_UNIT = (select cast((coalesce(new.PRECO_CUSTO, 0) / coalesce(P.CONV_QTDE, 1)) as numeric(15,2))
                         from PRODUTO P
                         where P.CODIGO = new.CODIGO)
    where PC.ID_MATPRIMA = new.CODIGO;
  end
end
^


/* Trigger: TRI_BU_PRODUTO */
CREATE TRIGGER TRI_BU_PRODUTO FOR PRODUTO
ACTIVE BEFORE UPDATE POSITION 0
AS
begin
  if (new.preco_venda <> old.preco_venda) then
  begin
    execute procedure pro_hist_precovenda('U',new.codigo,substring(new.ultima_alteracao from 1 for (position('|',new.ultima_alteracao)-1)),new.preco_venda);
  end
end
^


/* Trigger: TRI_BU_PRODUTO_COMPOSICAO_TOTAL */
CREATE TRIGGER TRI_BU_PRODUTO_COMPOSICAO_TOTAL FOR PRODUTO_COMPOSICAO
ACTIVE BEFORE UPDATE POSITION 0
AS
begin
  new.custo_total = cast(new.qtde * new.custo_unit as numeric(10,2));
end
^

SET TERM ; ^



/******************************************************************************/
/***                           Stored procedures                            ***/
/******************************************************************************/



SET TERM ^ ;

ALTER PROCEDURE PRO_ENTRADA_SAIDA (
    CODPRO INTEGER,
    QT NUMERIC(15,3),
    SINAL CHAR(1))
AS
begin
  if ((:QT is null) or (:QT = 0)) then
    Exit ;
  if (sinal = '+') then
    begin
      update PRODUTO set qtde_estoque = (qtde_estoque + :qt)
        where (CODIGO = :CODPRO) ;
    end
  else
    begin
      update PRODUTO set qtde_estoque = (qtde_estoque - :qt)
        where (CODIGO = :CODPRO) ;
    end
end^


ALTER PROCEDURE PRO_GET_SCRIPT (
    VERSAO INTEGER NOT NULL)
RETURNS (
    SCRIPT_DDL BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    SCRIPT_DML BLOB SUB_TYPE 1 SEGMENT SIZE 80)
AS
declare variable SQL blob sub_type 1 segment size 80;
begin
  sql = 'select s.ddl, s.dml from script s where s.versao = '||:versao;

   EXECUTE STATEMENT sql
   ON EXTERNAL '127.0.0.1/3060:C:\projetos\bancos\FB30\ldecliente.fdb'
   AS USER 'SISTEMA'
   PASSWORD 'ldesistemas'
   ROLE 'R_SISTEMA'
   INTO :script_ddl,:script_dml;

  suspend;
end^


ALTER PROCEDURE PRO_HIST_PRECOCUSTO (
    TIPO CHAR(1),
    IDPRODUTO INTEGER,
    PRECO NUMERIC(10,2),
    USUARIO VARCHAR(100),
    IDNF INTEGER)
AS
begin
  if (:TIPO = 'I') then
  /*insert*/
  begin
    insert into PRECOCUSTO_HISTORICO (ID, ID_PROD, PRECO_NOVO, data, USUARIO, ID_NFENTRADA)
    values (0, :IDPRODUTO, :PRECO, current_date, :USUARIO, :IDNF);
  end
  else
  begin /*update*/
    if (:PRECO <> (select P.PRECO_CUSTO
                   from PRODUTO P
                   where P.CODIGO = :IDPRODUTO)) then
    begin
      update PRECOCUSTO_HISTORICO A
      set A.DATA_FIM = current_date
      where A.ID = (select max(B.ID)
                    from PRECOCUSTO_HISTORICO B
                    where B.ID_PROD = :IDPRODUTO);

      insert into PRECOCUSTO_HISTORICO (ID, ID_PROD, PRECO_NOVO, data, USUARIO, ID_NFENTRADA)
      values (0, :IDPRODUTO, :PRECO, current_date, :USUARIO, :IDNF);
    end
  end
end^


ALTER PROCEDURE PRO_HIST_PRECOVENDA (
    TIPO CHAR(1),
    ID_PROD INTEGER,
    USUARIO VARCHAR(100),
    PRECO NUMERIC(10,2))
AS
begin
  if (:TIPO = 'I') then
  /*insert*/
  begin
    insert into PRECOVENDA_HISTORICO (ID, ID_PROD, USUARIO, PRECO_NOVO, data)
    values (0, :ID_PROD, :USUARIO, :PRECO, current_date);
  end
  else
  begin /*update*/
    if (:PRECO <> (select P.PRECO_VENDA
                   from PRODUTO P
                   where P.CODIGO = :ID_PROD)) then
    begin
      update PRECOVENDA_HISTORICO A
      set A.DT_FIM = current_date
      where A.ID = (select max(B.ID)
                    from PRECOVENDA_HISTORICO B
                    where B.ID_PROD = :ID_PROD);

      insert into PRECOVENDA_HISTORICO (ID, ID_PROD, USUARIO, PRECO_NOVO, data)
      values (0, :ID_PROD, :USUARIO, :PRECO, current_date);
    end
  end

end^


ALTER PROCEDURE PRO_ISCREDIARIO (
    TIPO CHAR(1) NOT NULL,
    ID INTEGER NOT NULL)
RETURNS (
    RETORNO INTEGER NOT NULL)
AS
declare variable FORMAPAGTO varchar(20);
declare variable DATABAIXA date;
begin
  retorno = 0;
  for select PR.FORMA_PAGTO, PR.DT_BAIXA
      from PDV_RECEBER PR
      where PR.TIPO = :TIPO and
            PR.ID = :ID and
            PR.forma_pagto <> 'DESCONTO'

      union all

      select PRP.FORMA_PAGTO, PRP.DT_BAIXA
      from PDV_RECEBER_PARCIAL PRP
      where PRP.TIPO = :TIPO and
            PRP.ID = :ID

      into :FORMAPAGTO, :DATABAIXA
  do
  begin
    if ((:FORMAPAGTO <> 'CREDIARIO') or (:DATABAIXA is not null)) then
    begin
      retorno = 1;
      suspend;
      exit;
    end
  end
  suspend;
end^


ALTER PROCEDURE PRO_MOVIMENTOPRODUTO (
    ID_PROD INTEGER)
RETURNS (
    ENTSAI CHAR(1),
    QTDE NUMERIC(15,3),
    QTDE_FECHADA NUMERIC(15,3),
    DTMOVTO DATE,
    LOTE VARCHAR(20),
    TIPO_MOVIMENTO VARCHAR(20),
    USUARIO VARCHAR(100),
    ID_PRODUTO INTEGER,
    DESCRI VARCHAR(100),
    TIPO_PRODUTO VARCHAR(20),
    CODBARRA VARCHAR(13),
    ESTOQUE_MINIMO NUMERIC(15,3),
    SIGLA_UM VARCHAR(10))
AS
begin
  select A.NOME, A.CODIGO,
         case upper(A.TIPO_PRODUTO)
           when 'PA' then 'Produto Acabado'
           when 'MP' then 'Materia Prima'
           else 'Ambos'
         end TIPO_PRODUTO,
         coalesce(A.EAN_CODBARRA, 0), coalesce(A.QTDE_MINIMA, 0), coalesce(C.SIGLA, B.SIGLA) SIGLA
  from PRODUTO A
  left outer join UNIDADE B on (B.CODIGO = A.COD_UNIDADE)
  left join UNIDADE C on (C.CODIGO = A.CONV_UNIDADE)
  where (A.CODIGO = :ID_PROD)
  into :DESCRI, :ID_PRODUTO, :TIPO_PRODUTO, :CODBARRA, :ESTOQUE_MINIMO, :SIGLA_UM;

  /**************ENTRADA - LOTE ****************/
  for select iif(B.ENTSAI = 'ENTRADA', 'E', 'S') ENTSAI, B.QTDE, B.QTDE_FECHADA, A.EMISSAO, A.LOTE, A.USUARIO,
             'LOTE' TIPO_MOVIMENTO
      from LOTE A
      left outer join LOTE_ITENS B on (B.ID_LOTE = A.LOTE)
      where (B.CODPRO = :ID_PROD)
      into :ENTSAI, :QTDE, :QTDE_FECHADA, :DTMOVTO, :LOTE, :USUARIO, :TIPO_MOVIMENTO
  do
  begin
    suspend;
  end
  /****************SAIDA - LOTE MAT. PRIMA *********************************/
  for select 'S' ENTSAI, B.QTDE, B.QTDE_FECHADA, A.EMISSAO, A.LOTE, A.USUARIO, 'LOTE' TIPO_MOVIMENTO
      from LOTE A
      left outer join LOTE_MATPRIMA B on (B.ID_LOTE = A.LOTE)
      where A.GERA_MATPRIMA = 'S' and
            (B.ID_MATPRIMA = :ID_PROD)
      into :ENTSAI, :QTDE, :QTDE_FECHADA, :DTMOVTO, :LOTE, :USUARIO, :TIPO_MOVIMENTO
  do
  begin
    suspend;
  end

  /****************SAIDA - VENDAS*********************************/
  for select 'S' ENTSAI, B.QTDE, B.QTDE_BAIXA, A.EMISSAO, A.TIPO || '-' || A.ID, C.USU_NOME, 'VENDA' TIPO_MOVIMENTO
      from PDV_MASTER A
      left outer join PDV_ITENS B on (B.TIPO = A.TIPO and
            B.ID = A.ID)
      left outer join USUARIO C on (C.ID_VENDEDOR = A.ID_VENDEDOR)
      where (B.ID_PRODUTO = :ID_PROD)
      into :ENTSAI, :QTDE, :QTDE_FECHADA, :DTMOVTO, :LOTE, :USUARIO, :TIPO_MOVIMENTO
  do
  begin
    suspend;
  end

  /****************SAIDA - PEDIDO_VENDA*********************************/
for select 'S' ENTSAI, I.QTDE_A_BAIXAR, I.QTDE_BAIXADA, P.EMISSAO, lpad(P.ID, 5, '0'),
           S.USUARIO || '|' || lpad(extract(day from S.DATA_HORA), 2, '0') || '/' || lpad(extract(month from S.DATA_HORA), 2, '0') || '/' || extract(year from S.DATA_HORA) || '|' || extract(hour from S.DATA_HORA) || ':' || extract(minute from S.DATA_HORA) USUARIO,
           'PEDIDO_VENDA' TIPO_MOVIMENTO
    from PEDIDO_VENDA P
    left join PEDIDO_VENDA_ITEM I on (I.ID_PEDIDO = P.ID)
    left join PEDIDO_VENDA_STATUS S on (S.ID_PEDIDO = P.ID and
          S.STATUS = P.STATUS)
    where (I.ID_PRODUTO = :ID_PRODUTO)
    into :ENTSAI, :QTDE, :QTDE_FECHADA, :DTMOVTO, :LOTE, :USUARIO, :TIPO_MOVIMENTO
do
begin
  suspend;
end  
  /****************ENTRADA - NF*********************************/
  for select 'E' ENTSAI, B.QTDE, B.QTDE, A.EMISSAO, 'NF:' || A.N_NF, C.USU_NOME, 'ENT-NF'
      from NOTA_ENTRADA A
      left outer join NOTA_ENTRADA_ITENS B on (B.ID_NOTAENTRADA = A.ID)
      left outer join USUARIO C on (C.USU_ID = A.ID_USUARIO)
      where (B.ID_PRODUTO = :ID_PROD)
      into :ENTSAI, :QTDE, :QTDE_FECHADA, :DTMOVTO, :LOTE, :USUARIO, :TIPO_MOVIMENTO
  do
  begin
    suspend;
  end

  /****************ENTRADA - DEVOLUCAO PDV*********************************/
  for select 'E' ENTSAI, A.QTDE, A.QTDE_BAIXA, A.data, A.TIPO || '-' || A.ID_VENDA, A.USUARIO,
             'DEV/TROCA' TIPO_MOVIMENTO
      from PDV_DEVOLUCAO A
      where (A.ID_PRODUTO = :ID_PROD)
      into :ENTSAI, :QTDE, :QTDE_FECHADA, :DTMOVTO, :LOTE, :USUARIO, :TIPO_MOVIMENTO
  do
  begin
    suspend;
  end

  /****************ENTRADA - CANCELAMENTO PDV*********************************/
  for select 'E' ENTSAI, A.QTDE, A.QTDE_BAIXA, A.data, A.TIPO || '-' || A.ID_VENDA, A.USUARIO,
             'CANCELADA' TIPO_MOVIMENTO
      from PDV_CANCELAMENTO A
      where (A.ID_PRODUTO = :ID_PROD)
      into :ENTSAI, :QTDE, :QTDE_FECHADA, :DTMOVTO, :LOTE, :USUARIO, :TIPO_MOVIMENTO
  do
  begin
    suspend;
  end

end^


ALTER PROCEDURE PRO_RECEBER_VLLIQ (
    TIPO CHAR(1) NOT NULL,
    ID INTEGER NOT NULL)
RETURNS (
    VL_LIQ NUMERIC(15,2),
    FORMAS_PAGTO VARCHAR(500))
AS
begin
  select sum(iif(PR.ID_HISTORICO in (47, 99), 0, PR.VALOR)) VL,
         list(upper(PR.FORMA_PAGTO) || ': ' || 'R$ ' || PR.VALOR, '  ') FORMAS_PAGTO
  from PDV_RECEBER PR
  where PR.ID = :ID and
        PR.TIPO = :TIPO
  into :VL_LIQ, :FORMAS_PAGTO;
  suspend;
end^


ALTER PROCEDURE PRO_SONUMEROS (
    TEXTO VARCHAR(100))
RETURNS (
    RETORNO VARCHAR(100))
AS
DECLARE VARIABLE CH CHAR(1);
BEGIN
  Retorno = '';
  WHILE (Texto IS NOT NULL AND Texto <> '') DO
  BEGIN
    Ch = SUBSTRING(Texto FROM 1 FOR 1);
    IF (Ch >= '0' AND Ch <= '9') THEN
      Retorno = Retorno || Ch;
    Texto = SUBSTRING(Texto FROM 2 FOR 100);
  END
  SUSPEND;
END^


ALTER PROCEDURE PRO_TOT_DUPLICATAS (
    TIPO CHAR(1),
    ID INTEGER)
RETURNS (
    VL_TOTAL NUMERIC(10,2))
AS
BEGIN
  select cast((coalesce(sum(x.valor),0)+ coalesce(sum(z.VALOR),0)) as numeric(10,2)) vl_total
  from PDV_RECEBER x
  left outer join PDV_RECEBER_PARCIAL z on (z.ID=x.ID and z.ORDEM=x.ORDEM and z.TIPO=x.TIPO)
  where x.ID = :ID and x.TIPO= :TIPO
  and ((x.ID_HISTORICO is null) or (x.ID_HISTORICO<>'47'))
  into :vl_total;
  
  begin
    suspend ;
  end
END^


ALTER PROCEDURE PRO_ULTIMAVENDA (
    ID_CLIENTE INTEGER NOT NULL)
RETURNS (
    DT_ULTIMACOMPRA DATE,
    VALOR NUMERIC(15,2))
AS
begin
  for select first 1 PM.EMISSAO, PM.VL_TOTAL
      from PDV_MASTER PM
      where PM.ID_CLIENTE = :id_cliente
      order by PM.EMISSAO desc
      into :dt_ultimacompra, :valor
      do
        suspend;
end^


ALTER PROCEDURE PRO_UPD_PRODUTO_CUSTO (
    IDPRODUTO INTEGER,
    PRECO NUMERIC(10,2))
AS
BEGIN
  update PRODUTO a
  set a.PRECO_CUSTO = :PRECO
  where a.CODIGO = :IDPRODUTO;
END^


ALTER PROCEDURE PRO_UPDATE_DEBITO_CLIENTE (
    IDCLIENTE INTEGER)
RETURNS (
    VALOR NUMERIC(10,2))
AS
BEGIN
  select cast(coalesce(sum(a.VALOR),0) as numeric(10,2))valor
  from PDV_MASTER b
  left outer join PDV_RECEBER a on (a.TIPO = b.TIPO and a.ID = b.ID)
  where /*a.FORMA_PAGTO = 'CREDIARIO'*/
     a.DT_BAIXA is null  
     and b.ID_CLIENTE = :idcliente
  into :valor;
  begin
    suspend ;
  end
END^



SET TERM ; ^



/******************************************************************************/
/***                                 Roles                                  ***/
/******************************************************************************/

CREATE ROLE R_SISTEMA;


/******************************************************************************/
/***                          Fields descriptions                           ***/
/******************************************************************************/

COMMENT ON COLUMN CONTAS_A_RECEBER.TIPO IS
'PEDIDO_VENDA=1';

COMMENT ON COLUMN CONTAS_A_RECEBER_LOG.COMANDO IS
'BAIXA
RESTAURACAO
PARCIAL';

COMMENT ON COLUMN CONTROL.EM_MANUTENCAO IS
'1 = em manutencao, 0 = livre';

COMMENT ON COLUMN PEDIDO_VENDA.GERAR_ORDEM_PRODUCAO IS
'ao marcar no pedido que deseja gerar producao, o pedido ao chegar no status PRODUCAO, ira gerar lote de entrada e saida de MP para suprir a necessidade do pedido.';

COMMENT ON COLUMN PEDIDO_VENDA_STATUS.STATUS IS
'DIGITADO
APROVADO
PRODU??O
CONCLU?DO';

